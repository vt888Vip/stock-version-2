import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';
import { publishSettlementMessage } from '@/lib/rabbitmq';
import TradingSessionModel from '@/models/TradingSession';
import { tradingScheduler } from '@/lib/scheduler/TradingScheduler';

// H√†m g·ª≠i settlement message v√†o queue s·ª≠ d·ª•ng RabbitMQ Manager
async function sendSettlementMessage(settlementData: {
  sessionId: string;
  id: string;
  timestamp: string;
}): Promise<boolean> {
  try {
    console.log('üì§ G·ª≠i settlement message qua RabbitMQ Manager:', settlementData.sessionId);
    
    // Auto-initialize RabbitMQ connection
    const { initializeRabbitMQ } = await import('@/lib/rabbitmq-auto-init');
    await initializeRabbitMQ();
    
    const success = await publishSettlementMessage(settlementData);
    
    if (success) {
      console.log('‚úÖ Settlement message ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng');
    } else {
      console.log('‚ùå Kh√¥ng th·ªÉ g·ª≠i settlement message');
    }
    
    return success;
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i settlement message:', error);
    return false;
  }
}

// API ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi phi√™n v√† t·∫°o phi√™n m·ªõi v·ªõi k·∫øt qu·∫£ c√≥ s·∫µn
export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ [SESSION-CHANGE] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request');
    
    const db = await getMongoDb();
    if (!db) {
      console.error('‚ùå [SESSION-CHANGE] Kh√¥ng th·ªÉ k·∫øt n·ªëi database');
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    const now = new Date();
    const currentMinute = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes()));
    const nextMinute = new Date(currentMinute.getTime() + 60000);

    // T·∫°o sessionId cho phi√™n hi·ªán t·∫°i
    const sessionId = `${currentMinute.getUTCFullYear()}${String(currentMinute.getUTCMonth() + 1).padStart(2, '0')}${String(currentMinute.getUTCDate()).padStart(2, '0')}${String(currentMinute.getUTCHours()).padStart(2, '0')}${String(currentMinute.getUTCMinutes()).padStart(2, '0')}`;

    // ‚úÖ SCHEDULER ONLY: Ki·ªÉm tra session hi·ªán t·∫°i tr∆∞·ªõc khi t·∫°o m·ªõi
    let currentSession = null;
    let sessionChanged = false;
    let sessionEnded = false;
    
    // Ki·ªÉm tra session hi·ªán t·∫°i trong database
    try {
      currentSession = await db.collection('trading_sessions').findOne({ 
        sessionId: sessionId
      });
      
      if (currentSession) {
        // Session ƒë√£ t·ªìn t·∫°i
        sessionEnded = currentSession.endTime <= now;
        sessionChanged = sessionEnded; // Ch·ªâ thay ƒë·ªïi khi session k·∫øt th√∫c
      } else {
        // Session ch∆∞a t·ªìn t·∫°i, c·∫ßn t·∫°o m·ªõi
        sessionChanged = true;
      }
    } catch (dbError) {
      console.error('‚ùå Database query error:', dbError);
      // Fallback: t·∫°o session m·ªõi
      sessionChanged = true;
    }
    

    // ‚úÖ SCHEDULER ONLY: Kh√¥ng c·∫ßn g·ª≠i settlement message n·ªØa
    // Scheduler s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω settlement

    // ‚úÖ SCHEDULER ONLY: Ch·ªâ t·∫°o session m·ªõi khi c·∫ßn thi·∫øt
    if (sessionChanged) {
      const result = Math.random() < 0.5 ? 'UP' : 'DOWN';
      
      // ‚úÖ AUTO-START SCHEDULER: T·ª± ƒë·ªông start Scheduler n·∫øu ch∆∞a ch·∫°y
      if (!tradingScheduler.running) {
        try {
          await tradingScheduler.start();
        } catch (schedulerError) {
          console.error(`‚ùå Failed to start scheduler:`, schedulerError);
          throw new Error(`Failed to start scheduler: ${schedulerError.message}`);
        }
      }
      
      try {
        const sessionInfo = await tradingScheduler.startSession(
          sessionId,
          currentMinute,
          nextMinute,
          result
        );
        
        currentSession = {
          sessionId: sessionInfo.sessionId,
          startTime: sessionInfo.startTime,
          endTime: sessionInfo.endTime,
          status: sessionInfo.status,
          result: sessionInfo.result,
          processingComplete: false,
          totalTrades: 0,
          totalWins: 0,
          totalLosses: 0,
          totalWinAmount: 0,
          totalLossAmount: 0
        };
        
      } catch (sessionError) {
        console.error(`‚ùå Failed to create session:`, sessionError);
        throw new Error(`Failed to create session: ${sessionError.message}`);
      }
    }

    // T√≠nh th·ªùi gian c√≤n l·∫°i
    const timeLeft = Math.max(0, Math.floor((nextMinute.getTime() - now.getTime()) / 1000));

    const response = {
      success: true,
      sessionChanged,
      currentSession: currentSession ? {
        sessionId: currentSession.sessionId,
        startTime: currentSession.startTime,
        endTime: currentSession.endTime,
        timeLeft,
        status: currentSession.status,
        result: currentSession.result
      } : null,
      serverTime: now.toISOString()
    };

    console.log('‚úÖ [SESSION-CHANGE] Response:', {
      sessionId: response.currentSession.sessionId,
      timeLeft: response.currentSession.timeLeft,
      sessionChanged: response.sessionChanged
    });

    return NextResponse.json(response, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error) {
    console.error('L·ªói khi theo d√µi thay ƒë·ªïi phi√™n:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
} 