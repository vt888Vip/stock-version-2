import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';
import amqp from 'amqplib';

// RabbitMQ Configuration
const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqps://seecjpys:zQCC056kIx1vnMmrImQqAAVbVUUfmk0M@fuji.lmq.cloudamqp.com/seecjpys';
const SETTLEMENTS_QUEUE = 'settlements';

// H√†m g·ª≠i settlement message v√†o queue
async function sendSettlementMessage(settlementData: {
  sessionId: string;
  result: 'UP' | 'DOWN';
  id: string;
  timestamp: string;
}): Promise<boolean> {
  try {
    const connection = await amqp.connect(RABBITMQ_URL);
    const channel = await connection.createChannel();
    
    // ƒê·∫£m b·∫£o queue t·ªìn t·∫°i
    await channel.assertQueue(SETTLEMENTS_QUEUE, {
      durable: true,
      maxPriority: 10
    });
    
    // G·ª≠i message
    const success = channel.sendToQueue(
      SETTLEMENTS_QUEUE,
      Buffer.from(JSON.stringify(settlementData)),
      {
        persistent: true,
        priority: 1
      }
    );
    
    await channel.close();
    await connection.close();
    
    return success;
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i settlement message:', error);
    return false;
  }
}

// API ƒë·ªÉ theo d√µi s·ª± thay ƒë·ªïi phi√™n v√† t·∫°o phi√™n m·ªõi v·ªõi k·∫øt qu·∫£ c√≥ s·∫µn
export async function GET(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    const now = new Date();
    const currentMinute = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes()));
    const nextMinute = new Date(currentMinute.getTime() + 60000);

    // T·∫°o sessionId cho phi√™n hi·ªán t·∫°i
    const sessionId = `${currentMinute.getUTCFullYear()}${String(currentMinute.getUTCMonth() + 1).padStart(2, '0')}${String(currentMinute.getUTCDate()).padStart(2, '0')}${String(currentMinute.getUTCHours()).padStart(2, '0')}${String(currentMinute.getUTCMinutes()).padStart(2, '0')}`;

    // L·∫•y phi√™n hi·ªán t·∫°i t·ª´ database
    let currentSession = await db.collection('trading_sessions').findOne({ 
      sessionId: sessionId,
      status: { $in: ['ACTIVE', 'COMPLETED'] }
    });

    // Ki·ªÉm tra xem phi√™n hi·ªán t·∫°i c√≥ k·∫øt th√∫c ch∆∞a
    const sessionEnded = currentSession && currentSession.endTime <= now;
    const sessionChanged = sessionEnded || !currentSession;

    // N·∫øu phi√™n ƒë√£ k·∫øt th√∫c v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω, g·ª≠i settlement message
    if (sessionEnded && currentSession && currentSession.status === 'ACTIVE') {
      console.log('‚è∞ Phi√™n ƒë√£ k·∫øt th√∫c, g·ª≠i settlement message:', currentSession.sessionId);
      
      try {
        console.log(`üîç [SESSION-CHANGE] Session ${currentSession.sessionId} c√≥ k·∫øt qu·∫£: ${currentSession.result}`);
        
        const settlementData = {
          sessionId: currentSession.sessionId,
          result: currentSession.result, // K·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh s·∫µn
          id: `settlement_${currentSession.sessionId}_${Date.now()}`,
          timestamp: new Date().toISOString()
        };

        // G·ª≠i v√†o queue settlements
        const queueResult = await sendSettlementMessage(settlementData);
        
        if (queueResult) {
          console.log('‚úÖ ƒê√£ g·ª≠i settlement v√†o queue:', currentSession.sessionId);
        } else {
          console.log('‚ùå Kh√¥ng th·ªÉ g·ª≠i settlement v√†o queue');
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi g·ª≠i settlement v√†o queue:', error);
      }
    }

    if (sessionChanged) {
      // T·∫°o phi√™n m·ªõi n·∫øu c·∫ßn
      if (!currentSession || sessionEnded) {
        // ‚úÖ KI·ªÇM TRA XEM SESSION ƒê√É T·ªíN T·∫†I CH∆ØA
        const existingSession = await db.collection('trading_sessions').findOne({ sessionId });
        
        if (existingSession) {
          // ‚úÖ S·ª¨ D·ª§NG K·∫æT QU·∫¢ C√ì S·∫¥N
          console.log(`‚úÖ S·ª≠ d·ª•ng session c√≥ s·∫µn ${sessionId} v·ªõi k·∫øt qu·∫£: ${existingSession.result}`);
          currentSession = existingSession;
        } else {
          // ‚úÖ CH·ªà T·∫†O K·∫æT QU·∫¢ RANDOM KHI TH·ª∞C S·ª∞ T·∫†O SESSION M·ªöI
          const result = Math.random() < 0.5 ? 'UP' : 'DOWN';
          
          const newSession = {
            sessionId,
            startTime: currentMinute,
            endTime: nextMinute,
            status: 'ACTIVE',
            result, // K·∫øt qu·∫£ ƒë∆∞·ª£c t·∫°o s·∫µn
            processingComplete: false,
            totalTrades: 0,
            totalWins: 0,
            totalLosses: 0,
            totalWinAmount: 0,
            totalLossAmount: 0,
            createdAt: now,
            updatedAt: now
          };

          // S·ª≠ d·ª•ng upsert ƒë·ªÉ tr√°nh t·∫°o tr√πng l·∫∑p
          await db.collection('trading_sessions').updateOne(
            { sessionId },
            { $setOnInsert: newSession },
            { upsert: true }
          );
          
          currentSession = newSession as any;
          console.log(`‚úÖ ƒê√£ t·∫°o phi√™n m·ªõi ${sessionId} v·ªõi k·∫øt qu·∫£: ${result}`);
        }
      }
    }

    // T√≠nh th·ªùi gian c√≤n l·∫°i
    const timeLeft = Math.max(0, Math.floor((nextMinute.getTime() - now.getTime()) / 1000));

    return NextResponse.json({
      success: true,
      sessionChanged,
      currentSession: {
        sessionId: currentSession?.sessionId || sessionId,
        startTime: currentSession?.startTime || currentMinute,
        endTime: currentSession?.endTime || nextMinute,
        timeLeft,
        status: currentSession?.status || 'ACTIVE',
        result: currentSession?.result || null
      },
      serverTime: now.toISOString()
    });

  } catch (error) {
    console.error('L·ªói khi theo d√µi thay ƒë·ªïi phi√™n:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
} 