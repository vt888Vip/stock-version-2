import { NextResponse } from 'next/server';
import { verifyToken } from '@/lib/auth';
import { sendTradeOrder } from '@/lib/rabbitmq';

export async function POST(req: Request) {
  const requestId = `place_order_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  try {
    console.log(`üöÄ [${requestId}] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·∫∑t l·ªánh (Queue Mode)`);
    
    // X√°c th·ª±c user
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      console.log(`‚ùå [${requestId}] Kh√¥ng c√≥ authorization header`);
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : authHeader;
    const user = await verifyToken(token);
    
    if (!user?.userId) {
      console.log(`‚ùå [${requestId}] Token kh√¥ng h·ª£p l·ªá`);
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const { sessionId, direction, amount } = await req.json();
    
    console.log(`üì• [${requestId}] Input data:`, { 
      sessionId, 
      direction, 
      amount, 
      userId: user.userId,
      timestamp: new Date().toISOString()
    });

    // Validate input
    if (!sessionId || !direction || !amount) {
      console.log(`‚ùå [${requestId}] Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc:`, { sessionId, direction, amount });
      return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });
    }

    if (!['UP', 'DOWN'].includes(direction)) {
      console.log(`‚ùå [${requestId}] H∆∞·ªõng kh√¥ng h·ª£p l·ªá:`, direction);
      return NextResponse.json({ message: 'Invalid direction' }, { status: 400 });
    }

    if (amount <= 0) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0:`, amount);
      return NextResponse.json({ message: 'Amount must be greater than 0' }, { status: 400 });
    }

    // Gi·ªõi h·∫°n amount
    const MAX_AMOUNT = 1000000000000; // 1000 t·ª∑ VND
    const MIN_AMOUNT = 1000; // 1,000 VND
    
    if (amount > MAX_AMOUNT) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn v∆∞·ª£t qu√° gi·ªõi h·∫°n:`, { amount, MAX_AMOUNT });
      return NextResponse.json({ message: `Amount cannot exceed ${MAX_AMOUNT.toLocaleString()} VND` }, { status: 400 });
    }
    
    if (amount < MIN_AMOUNT) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu:`, { amount, MIN_AMOUNT });
      return NextResponse.json({ message: `Amount must be at least ${MIN_AMOUNT.toLocaleString()} VND` }, { status: 400 });
    }

    console.log(`‚úÖ [${requestId}] Validation th√†nh c√¥ng`);

    // T·∫°o order data ƒë·ªÉ g·ª≠i v√†o queue
    const orderData = {
      sessionId,
      userId: user.userId,
      direction,
      amount: Number(amount),
      priority: 1, // Priority cho l·ªánh ƒë·∫∑t
      timestamp: new Date().toISOString()
    };

    console.log(`üê∞ [${requestId}] G·ª≠i order v√†o RabbitMQ queue...`);
    
    // G·ª≠i v√†o queue
    const queueSuccess = await sendTradeOrder(orderData);
    
    if (!queueSuccess) {
      console.log(`‚ùå [${requestId}] Kh√¥ng th·ªÉ g·ª≠i order v√†o queue`);
      return NextResponse.json({ 
        message: 'Service temporarily unavailable. Please try again.' 
      }, { status: 503 });
    }

    console.log(`‚úÖ [${requestId}] Order ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o queue th√†nh c√¥ng`);

    return NextResponse.json({
      success: true,
      message: 'Order queued successfully',
      orderId: orderData.timestamp, // Temporary ID
      status: 'queued',
      estimatedProcessingTime: '5-10 seconds'
    });

  } catch (error) {
    console.error(`‚ùå [${requestId}] L·ªói khi ƒë·∫∑t l·ªánh:`, {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString()
    });
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    return NextResponse.json({
      success: false,
      message: errorMessage
    }, { status: 500 });
  }
}
