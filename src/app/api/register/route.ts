import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { hashPassword, generateToken } from '@/lib/auth';

export async function POST(request: Request) {
  try {
    const { username, password } = await request.json();

    // Validate input
    if (!username || !password) {
      return NextResponse.json(
        { success: false, message: 'Vui l√≤ng nh·∫≠p username v√† password' },
        { status: 400 }
      );
    }

    // Validate username format
    if (username.length < 3) {
      return NextResponse.json(
        { success: false, message: 'T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra c√≥ k√Ω t·ª± c√≥ d·∫•u kh√¥ng
    const vietnameseRegex = /[√†√°·∫£√£·∫°ƒÉ·∫±·∫Ø·∫≥·∫µ·∫∑√¢·∫ß·∫•·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π√™·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç√¥·ªì·ªë·ªï·ªó·ªô∆°·ªù·ªõ·ªü·ª°·ª£√π√∫·ªß≈©·ª•∆∞·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë]/i;
    if (vietnameseRegex.test(username)) {
      return NextResponse.json(
        { success: false, message: 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a d·∫•u ti·∫øng Vi·ªát' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra c√≥ kho·∫£ng tr·∫Øng kh√¥ng
    if (/\s/.test(username)) {
      return NextResponse.json(
        { success: false, message: 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng' },
        { status: 400 }
      );
    }

    // Ki·ªÉm tra ch·ªâ ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi
    if (!/^[a-zA-Z0-9_]+$/.test(username)) {
      return NextResponse.json(
        { success: false, message: 'T√™n ƒëƒÉng nh·∫≠p ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi' },
        { status: 400 }
      );
    }

    // Validate password length
    if (password.length < 6) {
      return NextResponse.json(
        { success: false, message: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±' },
        { status: 400 }
      );
    }

    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    // Check if username already exists
    const existingUser = await db.collection('users').findOne({
      username: username.trim().toLowerCase()
    });

    if (existingUser) {
      return NextResponse.json(
        { success: false, message: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng' },
        { status: 400 }
      );
    }

    // Hash password
    const hashedPassword = await hashPassword(password);
    const now = new Date();

    // Create new user
    const newUser = {
      username: username.trim().toLowerCase(),
      password: hashedPassword,
      role: 'user',
      email: `${username.trim().toLowerCase()}@example.com`, // Th√™m email ƒë·ªÉ tr√°nh l·ªói index
      balance: {
        available: 0,
        frozen: 0,
      },
      bank: {
        name: '',
        accountNumber: '',
        accountHolder: '',
      },
      verification: {
        verified: false,
        cccdFront: '',
        cccdBack: '',
      },
      status: {
        active: true,
        betLocked: false,
        withdrawLocked: false,
      },
      lastLogin: now,
      createdAt: now,
      updatedAt: now,
    };

    let result;
    try {
      result = await db.collection('users').insertOne(newUser, { ignoreUndefined: true });
    } catch (error: any) {
      // N·∫øu l·ªói do duplicate key, th·ª≠ l·∫°i v·ªõi email kh√°c
      if (error.code === 11000 && error.keyPattern?.email) {
        console.log('üîÑ Th·ª≠ l·∫°i v·ªõi email kh√°c...');
        newUser.email = `${username.trim().toLowerCase()}_${Date.now()}@example.com`;
        result = await db.collection('users').insertOne(newUser, { ignoreUndefined: true });
      } else {
        throw error;
      }
    }

    if (!result.insertedId) {
      throw new Error('Kh√¥ng th·ªÉ t·∫°o t√†i kho·∫£n');
    }

    // Generate token for auto-login after registration
    const token = generateToken(result.insertedId.toString());

    // Prepare response with user data (excluding password)
    const { password: _, ...userWithoutPassword } = newUser;
    const responseData = {
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
      user: {
        ...userWithoutPassword,
        _id: result.insertedId.toString(),
      },
    };

    const response = NextResponse.json(responseData);

    // Set token in HTTP-only cookie
    response.cookies.set('token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      maxAge: 7 * 24 * 60 * 60, // 7 days
      path: '/',
      sameSite: 'lax',
    });

    return response;
  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    return NextResponse.json(
      { 
        success: false, 
        message: error instanceof Error ? error.message : 'L·ªói h·ªá th·ªëng' 
      },
      { status: 500 }
    );
  }
}
