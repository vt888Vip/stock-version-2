import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';

export async function POST(req: Request) {
  try {
    const db = await getMongoDb();
    
    // L·∫•y t·∫•t c·∫£ l·ªánh c√≥ result nh∆∞ng ch∆∞a ƒë∆∞·ª£c c√¥ng b·ªë (status = 'success')
    const completedTrades = await db.collection('trades').find({
      status: 'success',
      result: { $in: ['win', 'lose'] }
    }).toArray();

    console.log(`üîç T√¨m th·∫•y ${completedTrades.length} l·ªánh ƒë√£ c√≥ k·∫øt qu·∫£ c·∫ßn c√¥ng b·ªë`);

    let publishedCount = 0;
    let errorCount = 0;

    for (const trade of completedTrades) {
      try {
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªánh th√†nh 'completed' (ƒë√£ c√¥ng b·ªë)
        await db.collection('trades').updateOne(
          { _id: trade._id },
          {
            $set: {
              status: 'completed',
              publishedAt: new Date(),
              updatedAt: new Date()
            }
          }
        );

        // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng n·∫øu ch∆∞a c·∫≠p nh·∫≠t
        if (trade.profit !== 0) {
          const user = await db.collection('users').findOne({ _id: trade.userId });
          if (user) {
            const userBalance = user.balance || { available: 0, frozen: 0 };
            const currentAvailable = typeof userBalance === 'number' ? userBalance : userBalance.available || 0;
            
            // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t (ki·ªÉm tra b·∫±ng c√°ch so s√°nh profit)
            const expectedBalance = currentAvailable + trade.profit;
            
            await db.collection('users').updateOne(
              { _id: trade.userId },
              {
                $set: {
                  balance: {
                    available: expectedBalance,
                    frozen: typeof userBalance === 'number' ? 0 : userBalance.frozen || 0
                  },
                  updatedAt: new Date()
                }
              }
            );

            console.log(`‚úÖ C√¥ng b·ªë l·ªánh ${trade._id}: ${trade.result}, profit: ${trade.profit}, user balance: ${expectedBalance}`);
          }
        }

        publishedCount++;

      } catch (error) {
        console.error(`‚ùå L·ªói khi c√¥ng b·ªë l·ªánh ${trade._id}:`, error);
        errorCount++;
      }
    }

    return NextResponse.json({
      success: true,
      message: `ƒê√£ c√¥ng b·ªë k·∫øt qu·∫£: ${publishedCount} l·ªánh th√†nh c√¥ng, ${errorCount} l·ªói`,
      data: {
        publishedCount,
        errorCount,
        totalProcessed: completedTrades.length
      }
    });

  } catch (error) {
    console.error('L·ªói khi c√¥ng b·ªë k·∫øt qu·∫£:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
}

// API ƒë·ªÉ l·∫•y danh s√°ch l·ªánh ƒë√£ c√¥ng b·ªë k·∫øt qu·∫£
export async function GET(req: Request) {
  try {
    const db = await getMongoDb();
    
    // L·∫•y t·∫•t c·∫£ l·ªánh ƒë√£ c√¥ng b·ªë k·∫øt qu·∫£
    const publishedTrades = await db.collection('trades').find({
      status: 'completed',
      result: { $in: ['win', 'lose'] }
    }).sort({ publishedAt: -1 }).limit(50).toArray();

    return NextResponse.json({
      success: true,
      data: publishedTrades.map(trade => ({
        ...trade,
        _id: trade._id.toString(),
        userId: trade.userId.toString()
      }))
    });

  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch l·ªánh ƒë√£ c√¥ng b·ªë:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
} 