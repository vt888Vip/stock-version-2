import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { verifyToken } from '@/lib/auth';
import { ObjectId } from 'mongodb';

export async function POST(req: Request) {
  const requestId = `place_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  
  try {
    console.log(`üöÄ [${requestId}] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë·∫∑t l·ªánh`);
    
    // X√°c th·ª±c user
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      console.log(`‚ùå [${requestId}] Kh√¥ng c√≥ authorization header`);
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : authHeader;
    const user = await verifyToken(token);
    
    if (!user?.userId) {
      console.log(`‚ùå [${requestId}] Token kh√¥ng h·ª£p l·ªá`);
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ request
    const { sessionId, direction, amount } = await req.json();
    
    console.log(`üì• [${requestId}] Input data:`, { 
      sessionId, 
      direction, 
      amount, 
      userId: user.userId,
      timestamp: new Date().toISOString()
    });

    // Validate input
    if (!sessionId || !direction || !amount) {
      console.log(`‚ùå [${requestId}] Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc:`, { sessionId, direction, amount });
      return NextResponse.json({ message: 'Missing required fields' }, { status: 400 });
    }

    if (!['UP', 'DOWN'].includes(direction)) {
      console.log(`‚ùå [${requestId}] H∆∞·ªõng kh√¥ng h·ª£p l·ªá:`, direction);
      return NextResponse.json({ message: 'Invalid direction' }, { status: 400 });
    }

    if (amount <= 0) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0:`, amount);
      return NextResponse.json({ message: 'Amount must be greater than 0' }, { status: 400 });
    }

    // Gi·ªõi h·∫°n amount
    const MAX_AMOUNT = 1000000000000; // 1000 t·ª∑ VND
    const MIN_AMOUNT = 1000; // 1,000 VND
    
    if (amount > MAX_AMOUNT) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn v∆∞·ª£t qu√° gi·ªõi h·∫°n:`, { amount, MAX_AMOUNT });
      return NextResponse.json({ message: `Amount cannot exceed ${MAX_AMOUNT.toLocaleString()} VND` }, { status: 400 });
    }
    
    if (amount < MIN_AMOUNT) {
      console.log(`‚ùå [${requestId}] S·ªë ti·ªÅn d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu:`, { amount, MIN_AMOUNT });
      return NextResponse.json({ message: `Amount must be at least ${MIN_AMOUNT.toLocaleString()} VND` }, { status: 400 });
    }

    console.log(`‚úÖ [${requestId}] Validation th√†nh c√¥ng`);

    console.log(`üîå [${requestId}] ƒêang k·∫øt n·ªëi database...`);
    const db = await getMongoDb();
    if (!db) {
      console.log(`‚ùå [${requestId}] K·∫øt n·ªëi database th·∫•t b·∫°i`);
      return NextResponse.json({ message: 'Database connection failed' }, { status: 500 });
    }
    console.log(`‚úÖ [${requestId}] K·∫øt n·ªëi database th√†nh c√¥ng`);

    // 1. Ki·ªÉm tra phi√™n giao d·ªãch
    console.log(`üîç [${requestId}] Ki·ªÉm tra trading session: ${sessionId}`);
    const tradingSession = await db.collection('trading_sessions').findOne({ sessionId });
    
    if (!tradingSession) {
      console.log(`‚ùå [${requestId}] Kh√¥ng t√¨m th·∫•y trading session: ${sessionId}`);
      return NextResponse.json({ message: 'Trading session not found' }, { status: 404 });
    }

    console.log(`üìã [${requestId}] Session info:`, {
      sessionId: tradingSession.sessionId,
      status: tradingSession.status,
      endTime: tradingSession.endTime,
      currentTime: new Date()
    });

    if (tradingSession.status !== 'ACTIVE') {
      console.log(`‚ùå [${requestId}] Session kh√¥ng active:`, tradingSession.status);
      return NextResponse.json({ message: 'Trading session is not active' }, { status: 400 });
    }

    // Ki·ªÉm tra phi√™n ƒë√£ k·∫øt th√∫c ch∆∞a
    if (tradingSession.endTime <= new Date()) {
      console.log(`‚ùå [${requestId}] Session ƒë√£ k·∫øt th√∫c:`, {
        endTime: tradingSession.endTime,
        currentTime: new Date()
      });
      return NextResponse.json({ message: 'Trading session has ended' }, { status: 400 });
    }

    console.log(`‚úÖ [${requestId}] Session validation th√†nh c√¥ng`);

    // 2. Ki·ªÉm tra s·ªë l·ªánh ƒë√£ ƒë·∫∑t trong phi√™n n√†y
    console.log(`üîç [${requestId}] Ki·ªÉm tra s·ªë l·ªánh ƒë√£ ƒë·∫∑t trong session`);
    const userTradesInSession = await db.collection('trades').countDocuments({
      sessionId,
      userId: new ObjectId(user.userId),
      status: 'pending'
    });

    console.log(`üìä [${requestId}] S·ªë l·ªánh ƒë√£ ƒë·∫∑t: ${userTradesInSession}`);

    const MAX_TRADES_PER_SESSION = 5; // Gi·ªõi h·∫°n 5 l·ªánh per session
    if (userTradesInSession >= MAX_TRADES_PER_SESSION) {
      console.log(`‚ùå [${requestId}] ƒê√£ ƒë·∫°t gi·ªõi h·∫°n l·ªánh: ${userTradesInSession}/${MAX_TRADES_PER_SESSION}`);
      return NextResponse.json({ 
        message: `B·∫°n ƒë√£ ƒë·∫∑t t·ªëi ƒëa ${MAX_TRADES_PER_SESSION} l·ªánh cho phi√™n n√†y` 
      }, { status: 400 });
    }

    // 3. L·∫•y balance tr∆∞·ªõc khi ƒë·∫∑t l·ªánh
    console.log(`üí∞ [${requestId}] L·∫•y balance hi·ªán t·∫°i c·ªßa user: ${user.userId}`);
    const userBefore = await db.collection('users').findOne(
      { _id: new ObjectId(user.userId) },
      { projection: { balance: 1 } }
    );
    
    if (!userBefore) {
      console.log(`‚ùå [${requestId}] Kh√¥ng t√¨m th·∫•y user: ${user.userId}`);
      return NextResponse.json({ message: 'User not found' }, { status: 404 });
    }

    const balanceBefore = userBefore.balance || { available: 0, frozen: 0 };
    
    console.log(`üí∞ [${requestId}] Balance tr∆∞·ªõc khi ƒë·∫∑t l·ªánh:`, {
      available: balanceBefore.available,
      frozen: balanceBefore.frozen,
      requestedAmount: amount
    });
    
    // Ki·ªÉm tra balance ƒë·ªß
    if (balanceBefore.available < amount) {
      console.log(`‚ùå [${requestId}] Balance kh√¥ng ƒë·ªß:`, {
        available: balanceBefore.available,
        requested: amount,
        deficit: amount - balanceBefore.available
      });
      return NextResponse.json({ 
        message: `Insufficient balance. Available: ${balanceBefore.available.toLocaleString()} VND` 
      }, { status: 400 });
    }

    console.log(`‚úÖ [${requestId}] Balance validation th√†nh c√¥ng`);

    // 4. Tr·ª´ balance v·ªõi atomic operation
    console.log(`üí≥ [${requestId}] B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t balance (atomic operation)`);
    const balanceUpdateResult = await db.collection('users').updateOne(
      { 
        _id: new ObjectId(user.userId),
        'balance.available': { $gte: amount }  // ƒêi·ªÅu ki·ªán atomic
      },
      {
        $inc: {
          'balance.available': -amount,
          'balance.frozen': amount
        },
        $set: { updatedAt: new Date() }
      }
    );

    console.log(`üí≥ [${requestId}] K·∫øt qu·∫£ c·∫≠p nh·∫≠t balance:`, {
      matchedCount: balanceUpdateResult.matchedCount,
      modifiedCount: balanceUpdateResult.modifiedCount,
      upsertedCount: balanceUpdateResult.upsertedCount
    });

    if (balanceUpdateResult.modifiedCount === 0) {
      console.log(`‚ùå [${requestId}] C·∫≠p nh·∫≠t balance th·∫•t b·∫°i - c√≥ th·ªÉ balance ƒë√£ b·ªã thay ƒë·ªïi`);
      return NextResponse.json({ message: 'Insufficient balance or user not found' }, { status: 400 });
    }

    console.log(`‚úÖ [${requestId}] C·∫≠p nh·∫≠t balance th√†nh c√¥ng`);

    // 5. T·∫°o l·ªánh giao d·ªãch
    console.log(`üìù [${requestId}] T·∫°o trade record`);
    const trade = {
      sessionId,
      userId: new ObjectId(user.userId),
      direction,
      amount: Number(amount),
      status: 'pending',
      appliedToBalance: false,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    console.log(`üìù [${requestId}] Trade data:`, {
      sessionId: trade.sessionId,
      userId: trade.userId.toString(),
      direction: trade.direction,
      amount: trade.amount,
      status: trade.status
    });

    const tradeResult = await db.collection('trades').insertOne(trade);
    
    console.log(`üìù [${requestId}] K·∫øt qu·∫£ t·∫°o trade:`, {
      insertedId: tradeResult.insertedId?.toString(),
      acknowledged: tradeResult.acknowledged
    });
    
    if (!tradeResult.insertedId) {
      console.log(`‚ùå [${requestId}] T·∫°o trade th·∫•t b·∫°i, b·∫Øt ƒë·∫ßu rollback balance`);
      // N·∫øu t·∫°o trade th·∫•t b·∫°i, ho√†n l·∫°i balance
      const rollbackResult = await db.collection('users').updateOne(
        { _id: new ObjectId(user.userId) },
        {
          $inc: {
            'balance.available': amount,
            'balance.frozen': -amount
          },
          $set: { updatedAt: new Date() }
        }
      );
      
      console.log(`üîÑ [${requestId}] Rollback balance k·∫øt qu·∫£:`, {
        matchedCount: rollbackResult.matchedCount,
        modifiedCount: rollbackResult.modifiedCount
      });
      
      return NextResponse.json({ message: 'Failed to create trade' }, { status: 500 });
    }

    console.log(`‚úÖ [${requestId}] T·∫°o trade th√†nh c√¥ng`);

    console.log(`‚úÖ [${requestId}] ƒê·∫∑t l·ªánh th√†nh c√¥ng: User ${user.userId} - ${direction} ${amount} VND - Session ${sessionId}`);

    // L·∫•y l·∫°i l·ªánh v·ª´a t·∫°o ƒë·ªÉ tr·∫£ v·ªÅ
    console.log(`üîç [${requestId}] L·∫•y trade v·ª´a t·∫°o ƒë·ªÉ tr·∫£ v·ªÅ`);
    const insertedTrade = await db.collection('trades').findOne({
      _id: tradeResult.insertedId
    });

    if (!insertedTrade) {
      console.log(`‚ùå [${requestId}] Kh√¥ng t√¨m th·∫•y trade v·ª´a t·∫°o: ${tradeResult.insertedId}`);
      return NextResponse.json({ message: 'Inserted trade not found' }, { status: 500 });
    }

    const balanceAfter = {
      available: (balanceBefore.available || 0) - amount,
      frozen: (balanceBefore.frozen || 0) + amount
    };

    console.log(`üí∞ [${requestId}] Balance sau khi ƒë·∫∑t l·ªánh:`, {
      before: balanceBefore,
      after: balanceAfter,
      change: {
        available: -amount,
        frozen: amount
      }
    });

    console.log(`üéâ [${requestId}] Ho√†n th√†nh ƒë·∫∑t l·ªánh th√†nh c√¥ng`);

    return NextResponse.json({
      success: true,
      message: 'Trade placed successfully',
      trade: {
        ...insertedTrade,
        _id: insertedTrade._id.toString(),
        userId: insertedTrade.userId.toString()
      },
      balanceBefore: {
        available: balanceBefore.available || 0,
        frozen: balanceBefore.frozen || 0
      },
      balanceAfter: balanceAfter,
      tradesInSession: userTradesInSession + 1
    });

  } catch (error) {
    console.error(`‚ùå [${requestId}] L·ªói khi ƒë·∫∑t l·ªánh:`, {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      timestamp: new Date().toISOString()
    });
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    return NextResponse.json({
      success: false,
      message: errorMessage
    }, { status: 400 });
  }
}