import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { verifyToken } from '@/lib/auth';
import { ObjectId } from 'mongodb';
import mongoose from 'mongoose';

export async function POST(req: Request) {
  try {
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    const token = authHeader.startsWith('Bearer ') ? authHeader.split(' ')[1] : authHeader;
    const user = await verifyToken(token);
    
    if (!user?.userId) {
      return NextResponse.json({ message: 'Invalid token' }, { status: 401 });
    }

    const { sessionId } = await req.json();
    if (!sessionId) {
      return NextResponse.json({ message: 'Session ID is required' }, { status: 400 });
    }

    const db = await getMongoDb();
    
    // ‚ö° T·ªêI ∆ØU: L·∫•y k·∫øt qu·∫£ phi√™n t·ª´ trading_sessions v·ªõi index
    const session = await db.collection('trading_sessions').findOne(
      { sessionId },
      { projection: { result: 1, status: 1, actualResult: 1, endTime: 1 } }
    );
    
    if (!session) {
      return NextResponse.json({ 
        hasResult: false, 
        message: 'Session not found',
        shouldRetry: true 
      });
    }

    // Ki·ªÉm tra xem phi√™n ƒë√£ k·∫øt th√∫c ch∆∞a
    const now = new Date();
    const sessionEnded = session.endTime && session.endTime <= now;
    
    // ‚ö° RANDOM K·∫æT QU·∫¢: N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ v√† phi√™n ƒë√£ k·∫øt th√∫c
    if (!session.result && sessionEnded) {
      console.log(`üé≤ Session ${sessionId} ƒë√£ k·∫øt th√∫c nh∆∞ng ch∆∞a c√≥ k·∫øt qu·∫£, t·∫°o k·∫øt qu·∫£ random`);
      
      // ‚úÖ ATOMIC UPDATE: S·ª≠ d·ª•ng findOneAndUpdate ƒë·ªÉ tr√°nh race condition
      const updatedSession = await db.collection('trading_sessions').findOneAndUpdate(
        { 
          sessionId,
          result: null // Ch·ªâ update n·∫øu ch∆∞a c√≥ result
        },
        { 
          $set: { 
            result: Math.random() < 0.5 ? 'UP' : 'DOWN',
            actualResult: Math.random() < 0.5 ? 'UP' : 'DOWN',
            status: 'COMPLETED',
            completedAt: now,
            updatedAt: now,
            createdBy: 'system_random'
          }
        },
        { 
          returnDocument: 'after',
          upsert: false // Kh√¥ng t·∫°o m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y
        }
      );
      
      if (updatedSession) {
        console.log(`üé≤ ƒê√£ t·∫°o k·∫øt qu·∫£ random: ${updatedSession.result} cho session ${sessionId}`);
        // C·∫≠p nh·∫≠t session object ƒë·ªÉ s·ª≠ d·ª•ng k·∫øt qu·∫£ m·ªõi
        session.result = updatedSession.result;
        session.actualResult = updatedSession.actualResult;
        session.status = updatedSession.status;
      }
    }

    // N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£ (phi√™n ch∆∞a k·∫øt th√∫c)
    if (!session.result) {
      return NextResponse.json({ 
        hasResult: false,
        sessionEnded,
        shouldRetry: !sessionEnded // Ch·ªâ retry n·∫øu phi√™n ch∆∞a k·∫øt th√∫c
      });
    }

    // ‚úÖ PH∆Ø∆†NG √ÅN M·ªöI: T√¨m t·∫•t c·∫£ trades ch∆∞a ƒë∆∞·ª£c apply balance
    const pendingTrades = await db.collection('trades')
      .find({ 
        sessionId,
        status: 'pending',
        appliedToBalance: false  // ‚úÖ CH·ªà L·∫§Y NH·ªÆNG TRADE CH∆ØA APPLY
      })
      .toArray();

    if (pendingTrades.length > 0) {
      console.log(`üîÑ [CHECK RESULTS] X·ª≠ l√Ω ${pendingTrades.length} trades ch∆∞a apply balance cho session ${sessionId}`);
      
      // ‚úÖ ATOMIC UPDATE: X·ª≠ l√Ω t·ª´ng trade v·ªõi transaction
      for (const trade of pendingTrades) {
        const isWin = trade.direction.toLowerCase() === session.result?.toLowerCase();
        const profit = isWin ? Math.floor(trade.amount * 0.9) : 0; // 90% ti·ªÅn th·∫Øng (10 ƒÉn 9)
        
        console.log(`üéØ [TRADE RESULT] Trade ${trade._id}: direction=${trade.direction}, sessionResult=${session.result}, isWin=${isWin}, amount=${trade.amount}, profit=${profit}`);
        
        // ‚úÖ ATOMIC OPERATION: Update trade v√† balance trong 1 transaction
        const dbSession = await mongoose.startSession();
        
        try {
          await dbSession.withTransaction(async () => {
            // ƒê√°nh d·∫•u trade ƒë√£ ƒë∆∞·ª£c apply balance
            await db.collection('trades').updateOne(
              { _id: trade._id },
              {
                $set: {
                  status: 'completed',
                  result: isWin ? 'win' : 'lose',
                  profit: profit,
                  appliedToBalance: true, // ‚úÖ ƒê√ÅNH D·∫§U ƒê√É APPLY
                  completedAt: new Date(),
                  updatedAt: new Date()
                }
              },
              { session: dbSession }
            );

            // Update balance user
            if (isWin) {
              // Th·∫Øng: c·ªông ti·ªÅn g·ªëc + profit v√†o available, tr·ª´ ti·ªÅn g·ªëc kh·ªèi frozen
              await db.collection('users').updateOne(
                { _id: trade.userId },
                {
                  $inc: {
                    'balance.available': trade.amount + profit,
                    'balance.frozen': -trade.amount
                  },
                  $set: { updatedAt: new Date() }
                },
                { session: dbSession }
              );
            } else {
              // Thua: ch·ªâ tr·ª´ ti·ªÅn g·ªëc kh·ªèi frozen
              await db.collection('users').updateOne(
                { _id: trade.userId },
                {
                  $inc: {
                    'balance.frozen': -trade.amount
                  },
                  $set: { updatedAt: new Date() }
                },
                { session: dbSession }
              );
            }
          });
          
          console.log(`‚úÖ [ATOMIC UPDATE] Trade ${trade._id}: ${isWin ? 'WIN' : 'LOSE'}, profit: ${profit}`);
          
        } catch (error) {
          console.error(`‚ùå [ATOMIC UPDATE] L·ªói trade ${trade._id}:`, error);
          throw error;
        } finally {
          await dbSession.endSession();
        }
      }
    }

    // ‚ö° T·ªêI ∆ØU: Tr·∫£ v·ªÅ k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
    return NextResponse.json({ 
      hasResult: true,
      result: session.actualResult || session.result,
      sessionStatus: session.status,
      updatedTrades: pendingTrades.length,
      isRandom: session.createdBy === 'system_random'
    });

  } catch (error) {
    console.error('‚ùå Error in check-results:', error);
    return NextResponse.json({ 
      message: 'Internal server error',
      error: error instanceof Error ? error.message : 'Unknown error',
      shouldRetry: true
    }, { status: 500 });
  }
}
