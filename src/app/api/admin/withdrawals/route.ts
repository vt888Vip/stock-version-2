import { NextRequest, NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { ObjectId } from 'mongodb';
import { verifyToken } from '@/lib/auth';

// API ƒë·ªÉ admin l·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn
export async function GET(req: NextRequest) {
  try {
    // X√°c th·ª±c admin
    const token = req.headers.get('authorization')?.split(' ')[1];
    if (!token) {
      return NextResponse.json({ message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p' }, { status: 401 });
    }

    const { userId, isValid } = await verifyToken(token);
    if (!isValid || !userId) {
      return NextResponse.json({ message: 'Token kh√¥ng h·ª£p l·ªá' }, { status: 401 });
    }

    // Ki·ªÉm tra quy·ªÅn admin
    const db = await getMongoDb();
    const user = await db.collection('users').findOne({ _id: new ObjectId(userId) });
    if (!user || user.role !== 'admin') {
      return NextResponse.json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' }, { status: 403 });
    }

    // L·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn
    const withdrawals = await db.collection('withdrawals')
      .find({})
      .sort({ createdAt: -1 })
      .toArray();

    // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
    const withdrawalsWithBalance = await Promise.all(
      withdrawals.map(async (withdrawal) => {
        const user = await db.collection('users').findOne({ _id: withdrawal.user });
        if (user) {
          let userBalance = user.balance || { available: 0, frozen: 0 };
          
          // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
          if (typeof userBalance === 'number') {
            userBalance = {
              available: userBalance,
              frozen: 0
            };
            
            // C·∫≠p nh·∫≠t database ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ki·ªÉu m·ªõi
            await db.collection('users').updateOne(
              { _id: withdrawal.user },
              { 
                $set: { 
                  balance: userBalance,
                  updatedAt: new Date()
                } 
              }
            );
            
            console.log(`üîÑ [WITHDRAWAL ADMIN MIGRATION] User ${user.username}: Chuy·ªÉn ƒë·ªïi balance t·ª´ number sang object`);
          }
          
          return { ...withdrawal, userBalance: userBalance.available || 0 };
        }
        return withdrawal;
      })
    );

    return NextResponse.json({
      success: true,
      withdrawals: withdrawalsWithBalance
    });

  } catch (error) {
    console.error('Error fetching withdrawals:', error);
    return NextResponse.json({ message: 'ƒê√£ x·∫£y ra l·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu r√∫t ti·ªÅn' }, { status: 500 });
  }
}

// API ƒë·ªÉ admin x·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn
export async function POST(req: NextRequest) {
  try {
    // X√°c th·ª±c admin
    const token = req.headers.get('authorization')?.split(' ')[1];
    if (!token) {
      return NextResponse.json({ message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p' }, { status: 401 });
    }

    const { userId, isValid } = await verifyToken(token);
    if (!isValid || !userId) {
      return NextResponse.json({ message: 'Token kh√¥ng h·ª£p l·ªá' }, { status: 401 });
    }

    // Ki·ªÉm tra quy·ªÅn admin
    const db = await getMongoDb();
    const admin = await db.collection('users').findOne({ _id: new ObjectId(userId) });
    if (!admin || admin.role !== 'admin') {
      return NextResponse.json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' }, { status: 403 });
    }

    // Parse request body
    const { withdrawalId, action, notes } = await req.json();
    console.log('[ADMIN WITHDRAWALS] Nh·∫≠n request:', { withdrawalId, action, notes });

    if (!withdrawalId || !action) {
      console.log('[ADMIN WITHDRAWALS] Thi·∫øu th√¥ng tin:', { withdrawalId, action });
      return NextResponse.json({ message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt' }, { status: 400 });
    }

    if (!['approve', 'reject'].includes(action)) {
      console.log('[ADMIN WITHDRAWALS] H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá:', action);
      return NextResponse.json({ message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá' }, { status: 400 });
    }

    // L·∫•y th√¥ng tin y√™u c·∫ßu r√∫t ti·ªÅn
    const withdrawal = await db.collection('withdrawals').findOne({ withdrawalId });
    console.log('[ADMIN WITHDRAWALS] K·∫øt qu·∫£ truy v·∫•n withdrawal:', withdrawal);
    if (!withdrawal) {
      return NextResponse.json({ message: 'Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu r√∫t ti·ªÅn', debug: { withdrawalId } }, { status: 404 });
    }

    if (withdrawal.status !== 'Ch·ªù duy·ªát') {
      return NextResponse.json({ message: 'Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω' }, { status: 400 });
    }

    if (action === 'approve') {
      // ‚úÖ TI·ªÄN ƒê√É B·ªä TR·ª™ KHI USER R√öT - CH·ªà C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI
      console.log(`[ADMIN WITHDRAWALS] Duy·ªát y√™u c·∫ßu r√∫t ti·ªÅn ${withdrawal.amount} VND c·ªßa user ${withdrawal.username} - Ti·ªÅn ƒë√£ b·ªã tr·ª´ tr∆∞·ªõc ƒë√≥`);
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i y√™u c·∫ßu r√∫t ti·ªÅn
    const updateData = {
      status: action === 'approve' ? 'ƒê√£ duy·ªát' : 'T·ª´ ch·ªëi',
      notes: notes || '',
      updatedAt: new Date(),
      processedBy: admin.username,
      processedAt: new Date()
    };

    await db.collection('withdrawals').updateOne(
      { withdrawalId },
      { $set: updateData }
    );

    // N·∫øu t·ª´ ch·ªëi, c·∫ßn tr·∫£ l·∫°i ti·ªÅn cho user v√¨ ti·ªÅn ƒë√£ b·ªã tr·ª´ khi r√∫t
    if (action === 'reject') {
      const user = await db.collection('users').findOne({ _id: withdrawal.user });
      if (user) {
        // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
        let userBalance = user.balance || { available: 0, frozen: 0 };
        
        // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
        if (typeof userBalance === 'number') {
          userBalance = {
            available: userBalance,
            frozen: 0
          };
          
          console.log(`üîÑ [WITHDRAWAL REJECT MIGRATION] User ${user.username}: Chuy·ªÉn ƒë·ªïi balance t·ª´ number sang object`);
        }
        
        const currentAvailable = userBalance.available || 0;
        const newAvailableBalance = currentAvailable + withdrawal.amount;
        
        const newBalance = {
          ...userBalance,
          available: newAvailableBalance
        };
        
        await db.collection('users').updateOne(
          { _id: withdrawal.user },
          { 
            $set: { 
              balance: newBalance,
              updatedAt: new Date()
            } 
          }
        );
        
        console.log(`üí∞ [ADMIN WITHDRAWALS] ƒê√£ t·ª´ ch·ªëi v√† tr·∫£ l·∫°i ${withdrawal.amount} VND cho user ${user.username}. S·ªë d∆∞ c≈©: ${currentAvailable} VND, S·ªë d∆∞ m·ªõi: ${newAvailableBalance} VND`);
      }
    }

    return NextResponse.json({
      success: true,
      message: action === 'approve' ? 'ƒê√£ duy·ªát y√™u c·∫ßu r√∫t ti·ªÅn' : 'ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu r√∫t ti·ªÅn'
    });

  } catch (error) {
    console.error('Error processing withdrawal:', error);
    return NextResponse.json({ message: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu r√∫t ti·ªÅn' }, { status: 500 });
  }
}
