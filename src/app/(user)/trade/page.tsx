"use client";

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/lib/useAuth';
import { useToast } from "@/components/ui/use-toast";
import { useSocket } from '@/contexts/SocketContext';


import { Loader2, AlertCircle, RefreshCw, ArrowDown, ArrowUp, ChevronDown, Plus, Minus, Wallet } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import RightColumn from './RightColumn';
import TradeHistory from './TradeHistory';
import LiquidityTable from '@/components/LiquidityTable';
import TradingViewTickerTape from '@/components/TradingViewTickerTape';
import TradingViewAdvancedChart from '@/components/TradingViewAdvancedChart';
import SymbolSelector from '@/components/SymbolSelector';

// Types
export interface TradeHistoryRecord {
  id: string;
  sessionId: string;
  direction: "UP" | "DOWN";
  amount: number;
  status: "success" | "completed" | "pending" | "queued";
  result: "win" | "lose" | null;
  profit: number;
  createdAt: string;
}

// ‚úÖ X√ìA: Interface TradeResult kh√¥ng c√≤n ƒë∆∞·ª£c s·ª≠ d·ª•ng
// Thay th·∫ø b·∫±ng tradeResults array ƒë·ªÉ l∆∞u nhi·ªÅu k·∫øt qu·∫£

const QUICK_AMOUNTS = [100000, 1000000, 5000000, 10000000, 30000000, 50000000, 100000000, 200000000, 500000000];
const SESSION_DURATION = 60; // 60 seconds per session
const RESULT_DELAY = 12; // 12 seconds delay for result (gi·ªØ nguy√™n ƒë·ªÉ t·∫°o k·ªãch t√≠nh)

const formatCurrency = (value: number): string => {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(value);
};

const formatAmount = (value: string): string => {
  const num = parseFloat(value);
  return isNaN(num) ? '' : num.toLocaleString('vi-VN');
};

// H√†m sync balance ƒë∆°n gi·∫£n - ch·ªâ d√πng khi c·∫ßn thi·∫øt
async function syncBalance(
  setBalance: React.Dispatch<React.SetStateAction<number>>, 
  setIsSyncing: React.Dispatch<React.SetStateAction<boolean>>, 
  setLastBalanceSync?: React.Dispatch<React.SetStateAction<number>>
) {
  setIsSyncing(true);
  try {
    const res = await fetch('/api/user/balance/sync', {
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
      }
    });
    const data = await res.json();
    
    if (data.success) {
      const newBalance = data.balance.available;
      setBalance(newBalance);
      if (setLastBalanceSync) {
        setLastBalanceSync(Date.now());
      }
    }
  } catch (error) {
    console.error('‚ùå [BALANCE] Error syncing balance:', error);
  }
  setIsSyncing(false);
}

export default function TradePage() {
  const { user, isLoading: authLoading } = useAuth();
  const router = useRouter();
  const { toast } = useToast();
  const { socket, isConnected } = useSocket();
  
  // State
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [balance, setBalance] = useState<number>(0);
  const [frozenBalance, setFrozenBalance] = useState<number>(0);
  const [tradeHistory, setTradeHistory] = useState<TradeHistoryRecord[]>([]);

  // Utility function ƒë·ªÉ deduplicate trade history
  const deduplicateTradeHistory = (trades: TradeHistoryRecord[]): TradeHistoryRecord[] => {
    const seen = new Set<string>();
    const duplicates: string[] = [];
    
    const filtered = trades.filter(trade => {
      if (seen.has(trade.id)) {
        duplicates.push(trade.id);
        console.warn('üö® Duplicate trade found:', trade.id);
        return false;
      }
      seen.add(trade.id);
      return true;
    });
    
    if (duplicates.length > 0) {
      console.warn('üö® Found duplicate trades:', duplicates);
    }
    
    return filtered;
  };

  // Utility function ƒë·ªÉ validate v√† format date
  const validateAndFormatDate = (dateString: string): string => {
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        console.warn('üö® Invalid date:', dateString, 'using current date');
        return new Date().toISOString();
      }
      return date.toISOString();
    } catch (error) {
      console.warn('üö® Date parsing error:', error, 'using current date');
      return new Date().toISOString();
    }
  };
  const [currentSessionId, setCurrentSessionId] = useState<string>('');
  const [timeLeft, setTimeLeft] = useState<number>(SESSION_DURATION);
  const [amount, setAmount] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isConfirming, setIsConfirming] = useState(false);
  const [selectedAction, setSelectedAction] = useState<"UP" | "DOWN" | null>(null);
  // ‚úÖ S·ª¨A: L∆∞u nhi·ªÅu trade results thay v√¨ ch·ªâ 1
  const [tradeResults, setTradeResults] = useState<Array<{ tradeId: string; status: string; profit: number; amount: number }>>([]);

  const [sessionStatus, setSessionStatus] = useState<'ACTIVE' | 'PREDICTED' | 'COMPLETED'>('ACTIVE');
  const [chartSymbol, setChartSymbol] = useState('TVC:GOLD');
  const [isSyncingBalance, setIsSyncingBalance] = useState(false);

  // Th√™m state cho ng√†y v√† gi·ªù hi·ªán t·∫°i
  const [currentDate, setCurrentDate] = useState('');
  const [currentTime, setCurrentTime] = useState('');

  // Th√™m state cho countdown c·∫≠p nh·∫≠t sau 12 gi√¢y
  const [updateCountdown, setUpdateCountdown] = useState<number | null>(null);
  const [countdownStarted, setCountdownStarted] = useState(false);
  const [isBalanceLocked, setIsBalanceLocked] = useState(false);
  const [lastBalanceSync, setLastBalanceSync] = useState<number>(0);
  const [tradesInCurrentSession, setTradesInCurrentSession] = useState<number>(0);
  
  // ‚úÖ TH√äM: State ƒë·ªÉ ki·ªÉm so√°t polling khi ƒëang ƒë·∫∑t l·ªánh
  const [isPlacingTrade, setIsPlacingTrade] = useState(false);

  // Listen for balance:updated events from Socket.IO
  useEffect(() => {
    const handleBalanceUpdate = (event: CustomEvent) => {
      const { profit, result, amount, tradeId } = event.detail;
      console.log('üí∞ Balance update received from Socket.IO:', event.detail);
      
      // ‚úÖ DEBUG: Log balance tr∆∞·ªõc v√† sau khi c·∫≠p nh·∫≠t
      console.log('üîç [BALANCE UPDATE] Before update:', {
        currentBalance: balance,
        currentFrozen: frozenBalance,
        update: { tradeId, profit, result, amount }
      });
      
      // ‚úÖ DEBUG: Log logic x·ª≠ l√Ω
      if (result === 'win') {
        console.log('üéØ [BALANCE UPDATE] WIN logic: balance + amount + profit, frozen - amount');
      } else {
        console.log('üéØ [BALANCE UPDATE] LOSE logic: balance unchanged, frozen - amount');
      }
      
      // ‚úÖ S·ª¨A: T√≠nh balance ch√≠nh x√°c d·ª±a tr√™n amount v√† profit
      if (result === 'win') {
        // TH·∫ÆNG: Tr·∫£ l·∫°i ti·ªÅn g·ªëc + ti·ªÅn th·∫Øng
        setBalance(prev => {
          const newBalance = prev + amount + profit;
          console.log('‚úÖ [BALANCE UPDATE] WIN - New balance:', newBalance, '(+', amount + profit, ')');
          return newBalance;
        });
        setFrozenBalance(prev => {
          const newFrozen = Math.max(0, prev - amount);
          console.log('‚úÖ [BALANCE UPDATE] WIN - New frozen:', newFrozen, '(-', amount, ')');
          return newFrozen;
        }); // Gi·∫£m frozen balance (ti·ªÅn g·ªëc)
      } else {
        // ‚úÖ S·ª¨A: THUA - KH√îNG c·ªông ti·ªÅn v√†o available, ch·ªâ gi·∫£m frozen
        // Khi thua, user m·∫•t ti·ªÅn, kh√¥ng ƒë∆∞·ª£c tr·∫£ l·∫°i
        setBalance(prev => {
          // ‚ùå SAI: prev + amount (c·ªông ti·ªÅn g·ªëc)
          // ‚úÖ ƒê√öNG: prev (gi·ªØ nguy√™n balance)
          console.log('‚úÖ [BALANCE UPDATE] LOSE - Balance unchanged:', prev, '(user lost', amount, ')');
          return prev; // Gi·ªØ nguy√™n balance, kh√¥ng c·ªông g√¨
        });
        setFrozenBalance(prev => {
          const newFrozen = Math.max(0, prev - amount);
          console.log('‚úÖ [BALANCE UPDATE] LOSE - New frozen:', newFrozen, '(-', amount, ')');
          return newFrozen;
        }); // Gi·∫£m frozen balance (ti·ªÅn g·ªëc)
      }
      
      // ‚úÖ S·ª¨A: Th√™m trade result m·ªõi v√†o danh s√°ch
      setTradeResults(prev => {
        const newResults = [
          ...prev,
          {
            tradeId: event.detail.tradeId,
            status: result,
            profit: profit,
            amount: amount
          }
        ];
        console.log('üìä [TRADE RESULTS] Updated:', newResults);
        return newResults;
      });
    };

    const handleTradePlaced = (event: CustomEvent) => {
      const { tradeId, sessionId, direction, amount, type } = event.detail;
      console.log('üìä Trade placed event received from Socket.IO:', event.detail);
      
      // Th√™m trade m·ªõi v√†o trade history
      const newTradeRecord: TradeHistoryRecord = {
        id: tradeId,
        sessionId: sessionId,
        direction: direction,
        amount: amount || 0,
        status: 'pending',
        result: null,
        profit: 0,
        createdAt: new Date().toISOString(),
      };
      
      // Th√™m v√†o ƒë·∫ßu danh s√°ch trade history (deduplicate)
      setTradeHistory(prev => {
        // Ki·ªÉm tra xem trade ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingIndex = prev.findIndex(t => t.id === newTradeRecord.id);
        if (existingIndex >= 0) {
          // C·∫≠p nh·∫≠t trade hi·ªán c√≥
          const updated = [...prev];
          updated[existingIndex] = newTradeRecord;
          return updated;
        } else {
          // Th√™m trade m·ªõi v√†o ƒë·∫ßu
          return [newTradeRecord, ...prev];
        }
      });
      
      // TƒÉng s·ªë trades trong session hi·ªán t·∫°i
      setTradesInCurrentSession(prev => prev + 1);
    };

    const handleTradeCompleted = (event: CustomEvent) => {
      const { tradeId, sessionId, result, profit, amount, direction } = event.detail;
      console.log('üéâ Trade completed event received from Socket.IO:', event.detail);
      
      // ‚úÖ S·ª¨A: Th√™m trade result m·ªõi v√†o danh s√°ch
      setTradeResults(prev => [
        ...prev,
        {
          tradeId: tradeId,
          status: result,
          profit: profit,
          amount: amount
        }
      ]);
      
      // Gi·∫£m s·ªë trades trong session hi·ªán t·∫°i
      setTradesInCurrentSession(prev => Math.max(0, prev - 1));
    };

    const handleTradeHistoryUpdated = (event: CustomEvent) => {
      const { action, trade } = event.detail;
      console.log('üìä Trade history updated event received from Socket.IO:', event.detail);
      
      if (action === 'add') {
        // Th√™m trade m·ªõi v√†o trade history
        const newTradeRecord: TradeHistoryRecord = {
          id: trade.id,
          sessionId: trade.sessionId,
          direction: trade.direction,
          amount: trade.amount,
          status: trade.status,
          result: trade.result,
          profit: trade.profit,
          createdAt: validateAndFormatDate(trade.createdAt),
        };
        
        setTradeHistory(prev => {
          // Ki·ªÉm tra xem trade ƒë√£ t·ªìn t·∫°i ch∆∞a
          const existingIndex = prev.findIndex(t => t.id === newTradeRecord.id);
          if (existingIndex >= 0) {
            // C·∫≠p nh·∫≠t trade hi·ªán c√≥
            const updated = [...prev];
            updated[existingIndex] = newTradeRecord;
            return updated;
          } else {
            // Th√™m trade m·ªõi v√†o ƒë·∫ßu
            return [newTradeRecord, ...prev];
          }
        });
        setTradesInCurrentSession(prev => prev + 1);
        
      } else if (action === 'update') {
        // C·∫≠p nh·∫≠t trade hi·ªán c√≥ trong trade history
        setTradeHistory(prev => {
          // T√¨m trade v·ªõi tradeId (format t·ª´ database)
          const existingIndex = prev.findIndex(t => 
            t.id === trade.id || 
            t.id === trade.tradeId ||
            t.id === trade.id
          );
          
          console.log('üîç Found trade at index:', existingIndex);
          
          if (existingIndex >= 0) {
            const updated = [...prev];
            updated[existingIndex] = {
              id: trade.id,
              sessionId: trade.sessionId,
              direction: trade.direction,
              amount: trade.amount,
              status: trade.status,
              result: trade.result,
              profit: trade.profit,
              createdAt: validateAndFormatDate(trade.createdAt),
            };
            console.log('‚úÖ Updated trade in history:', updated[existingIndex]);
            return updated;
          } else {
            console.log('‚ùå Trade not found in history, adding as new');
            // N·∫øu kh√¥ng t√¨m th·∫•y, th√™m nh∆∞ trade m·ªõi
            const newTradeRecord: TradeHistoryRecord = {
              id: trade.id,
              sessionId: trade.sessionId,
              direction: trade.direction,
              amount: trade.amount,
              status: trade.status,
              result: trade.result,
              profit: trade.profit,
              createdAt: validateAndFormatDate(trade.createdAt),
            };
            return [newTradeRecord, ...prev];
          }
        });
        
        // Gi·∫£m s·ªë trades trong session hi·ªán t·∫°i n·∫øu trade ho√†n th√†nh
        if (trade.status === 'completed') {
          setTradesInCurrentSession(prev => Math.max(0, prev - 1));
          console.log('‚úÖ Trade completed, reduced trades in session');
        }
      }
    };

    // Add event listeners
    window.addEventListener('balance:updated', handleBalanceUpdate as EventListener);
    window.addEventListener('trade:placed', handleTradePlaced as EventListener);
    window.addEventListener('trade:completed', handleTradeCompleted as EventListener);
    window.addEventListener('trade:history:updated', handleTradeHistoryUpdated as EventListener);

    // Cleanup
    return () => {
      window.removeEventListener('balance:updated', handleBalanceUpdate as EventListener);
      window.removeEventListener('trade:placed', handleTradePlaced as EventListener);
      window.removeEventListener('trade:completed', handleTradeCompleted as EventListener);
      window.removeEventListener('trade:history:updated', handleTradeHistoryUpdated as EventListener);
    };
  }, []);

  // Load user balance and current session
  useEffect(() => {
    if (!authLoading && !user) {
      router.replace('/auth/login');
      toast({ variant: 'destructive', title: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y' });
      return;
    }

    const loadUserData = async () => {
      try {
        let currentSessionId = '';
        
        // L·∫•y phi√™n giao d·ªãch hi·ªán t·∫°i
        const sessionResponse = await fetch('/api/trading-sessions');
        if (sessionResponse.ok) {
          const sessionData = await sessionResponse.json();
          if (sessionData.success) {
            currentSessionId = sessionData.currentSession.sessionId;
            setCurrentSessionId(sessionData.currentSession.sessionId);
            setTimeLeft(sessionData.currentSession.timeLeft);
          }
        }

        // L·∫•y l·ªãch s·ª≠ giao d·ªãch t·ª´ database
        const tradeHistoryResponse = await fetch('/api/trades/history', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (tradeHistoryResponse.ok) {
          const tradeHistoryData = await tradeHistoryResponse.json();
          console.log('üìä [HISTORY] Response data:', tradeHistoryData);
          
          if (tradeHistoryData.trades && tradeHistoryData.trades.length > 0) {
            // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ database sang format c·ªßa component
            const formattedTrades: TradeHistoryRecord[] = tradeHistoryData.trades.map((trade: any) => ({
              id: trade.id || trade._id || trade._id?.toString() || 'unknown',
              sessionId: trade.sessionId,
              direction: trade.direction || 'UP',
              amount: trade.amount || 0,
              status: trade.status || 'pending',
              result: trade.result || null,
              profit: trade.profit || 0,
              createdAt: validateAndFormatDate(trade.createdAt || new Date().toISOString()),
            }));

            setTradeHistory(deduplicateTradeHistory(formattedTrades));
            
            // ƒê·∫øm s·ªë l·ªánh pending trong phi√™n hi·ªán t·∫°i
            const currentSessionTrades = formattedTrades.filter(trade => 
              trade.sessionId === currentSessionId && 
              trade.status === 'pending'
            );
            setTradesInCurrentSession(currentSessionTrades.length);
          }
        }

        setIsLoading(false);
      } catch (error) {
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.');
        setIsLoading(false);
      }
    };

    if (user) {
      loadUserData();
    }
  }, [authLoading, user, router, toast]);

  // ‚úÖ SIMPLIFIED: Load balance ban ƒë·∫ßu khi component mount
  useEffect(() => {
    if (!authLoading && user) {
      const loadInitialBalance = async () => {
        try {
          const balanceResponse = await fetch('/api/user/balance', {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
          });
          
          if (balanceResponse.ok) {
            const balanceData = await balanceResponse.json();
            if (balanceData.success) {
              const initialBalance = balanceData.balance.available;
              const initialFrozenBalance = balanceData.balance.frozen || 0;
              setBalance(initialBalance);
              setFrozenBalance(initialFrozenBalance);
              setLastBalanceSync(Date.now());
            }
          }
        } catch (error) {
          console.error('‚ùå [INIT] L·ªói khi load balance ban ƒë·∫ßu:', error);
        }
      };

      loadInitialBalance();
    }
  }, [authLoading, user]);

  // ‚úÖ T·ªêI ∆ØU: Smart polling cho session updates
  useEffect(() => {
    // ‚úÖ T·∫†M D·ª™NG POLLING: Kh√¥ng polling khi ƒëang ƒë·∫∑t l·ªánh
    if (isPlacingTrade) {
      // console.log('‚è∏Ô∏è T·∫°m d·ª´ng session polling - ƒëang ƒë·∫∑t l·ªánh');
      return;
    }

    const updateSession = async () => {
      try {
        // ‚úÖ S·ª¨ D·ª§NG MONITORING: Wrap API call v·ªõi performance tracking
        const sessionResponse = await fetch('/api/trading-sessions/session-change');
        if (!sessionResponse.ok) {
          throw new Error('Session update failed');
        }
        const sessionData = await sessionResponse.json();
        
        if (sessionData.success) {
            const newSessionId = sessionData.currentSession.sessionId;
            const newTimeLeft = sessionData.currentSession.timeLeft;
            const sessionChanged = sessionData.sessionChanged;
            
            // C·∫≠p nh·∫≠t timeLeft
            setTimeLeft(newTimeLeft);
            
            // N·∫øu phi√™n thay ƒë·ªïi, c·∫≠p nh·∫≠t sessionId v√† reset c√°c tr·∫°ng th√°i
            if (sessionChanged || newSessionId !== currentSessionId) {
              setCurrentSessionId(newSessionId);
              
              // Reset c√°c tr·∫°ng th√°i li√™n quan khi session m·ªõi b·∫Øt ƒë·∫ßu
                              setTradeResults([]); // ‚úÖ S·ª¨A: Reset trade results khi b·∫Øt ƒë·∫ßu phi√™n m·ªõi
              setTradesInCurrentSession(0); // Reset s·ªë l·ªánh trong phi√™n m·ªõi
              // console.log('üîÑ Phi√™n m·ªõi b·∫Øt ƒë·∫ßu:', newSessionId);
            }
            
            setSessionStatus(sessionData.currentSession.status);
          }
      } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t phi√™n:', error);
      }
    };
    
    // Update immediately
    updateSession();
    
    // ‚úÖ MINIMAL POLLING: Ch·ªâ poll khi c·∫ßn thi·∫øt
    let interval;
    if (timeLeft <= 0) {
      interval = 2000; // Poll m·ªói 2 gi√¢y khi timer = 0 (ch·ªù phi√™n m·ªõi)
    } else if (timeLeft <= 5) {
      interval = 2000; // Poll m·ªói 2 gi√¢y khi g·∫ßn v·ªÅ 0
    } else {
      interval = 30000; // Poll m·ªói 30 gi√¢y khi c√≤n nhi·ªÅu th·ªùi gian
    }
    
    const sessionInterval = setInterval(updateSession, interval);
    
    return () => clearInterval(sessionInterval);
  }, [currentSessionId, timeLeft, isPlacingTrade]); // ‚úÖ Th√™m isPlacingTrade v√†o dependency

  // ‚úÖ T·ªêI ∆ØU: Local timer v·ªõi fallback cho server sync
  useEffect(() => {
    if (timeLeft <= 0) {
      return;
    }
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [timeLeft]);

  // ‚úÖ SIMPLIFIED: Ch·ªâ check results khi c·∫ßn thi·∫øt
  useEffect(() => {
    // Ch·ªâ check results khi c√≥ l·ªánh pending v√† timer = 0
    if (timeLeft === 0 && tradesInCurrentSession > 0 && !countdownStarted) {
      console.log('üîç B·∫Øt ƒë·∫ßu check k·∫øt qu·∫£ cho', tradesInCurrentSession, 'l·ªánh');
    }
  }, [timeLeft, tradesInCurrentSession, countdownStarted]);

  // ‚úÖ S·ª¨A: Th√™m c·ªù ƒë·ªÉ ƒë√°nh d·∫•u phi√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
  const [processedSessions, setProcessedSessions] = useState<string[]>([]);

  // Force update session when timeLeft reaches 0
  useEffect(() => {
    // ‚úÖ S·ª¨A: Ch·ªâ trigger n·∫øu phi√™n ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
    if (timeLeft === 0 && !countdownStarted && !processedSessions.includes(currentSessionId)) {
      console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω k·∫øt qu·∫£ cho phi√™n:', currentSessionId);
      
      // ƒê√°nh d·∫•u phi√™n n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
      setProcessedSessions(prev => [...prev, currentSessionId]);
      
      // ƒê√°nh d·∫•u countdown ƒë√£ b·∫Øt ƒë·∫ßu ƒë·ªÉ tr√°nh b·∫Øt ƒë·∫ßu l·∫°i
      setCountdownStarted(true);
      
      // Lock balance ƒë·ªÉ tr√°nh c·∫≠p nh·∫≠t trong qu√° tr√¨nh countdown
      setIsBalanceLocked(true);
      
      // B·∫Øt ƒë·∫ßu countdown 12 gi√¢y
      setUpdateCountdown(12); // Gi·ªØ nguy√™n 12 gi√¢y ƒë·ªÉ t·∫°o k·ªãch t√≠nh
      
      // ‚úÖ SIMPLIFIED: Sync balance v√† reset countdown sau 12 gi√¢y
      const syncBalanceAfterDelay = async () => {
        try {
          // ‚úÖ T·∫†M D·ª™NG BALANCE SYNC: Kh√¥ng sync khi ƒëang ƒë·∫∑t l·ªánh
          if (!isPlacingTrade) {
            await syncBalance(setBalance, setIsSyncingBalance, setLastBalanceSync);
          }
        } catch (error) {
          console.error('L·ªói khi sync balance sau 12 gi√¢y:', error);
        } finally {
          setUpdateCountdown(null);
          setCountdownStarted(false); // Reset ƒë·ªÉ c√≥ th·ªÉ b·∫Øt ƒë·∫ßu countdown m·ªõi
          setIsBalanceLocked(false); // Unlock balance sau khi sync xong
        }
      };

      // Sync balance sau 12 gi√¢y
      setTimeout(syncBalanceAfterDelay, 12000);

      // ‚úÖ SIMPLIFIED: Ch·ªâ trigger check results m·ªôt l·∫ßn sau 12 gi√¢y
      // Socket.IO s·∫Ω handle real-time updates, kh√¥ng c·∫ßn duplicate triggers
      setTimeout(async () => {
        try {
          
          const checkResultsResponse = await fetch('/api/trades/check-results', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({ sessionId: currentSessionId })
          });

          if (checkResultsResponse.ok) {
            console.log('üì° [CHECK-RESULTS] Triggered successfully, Socket.IO s·∫Ω c·∫≠p nh·∫≠t real-time');
          } else {
            console.error('‚ùå L·ªói khi trigger check results:', checkResultsResponse.status);
          }
        } catch (error) {
          console.error('‚ùå L·ªói khi trigger check results:', error);
        }
      }, 12000);

      // ‚úÖ REMOVED: Kh√¥ng c·∫ßn force update session v√¨ polling ƒë√£ handle
    } else if (timeLeft === 0 && processedSessions.includes(currentSessionId)) {
      // ‚úÖ S·ª¨A: Phi√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω r·ªìi, b·ªè qua
      console.log('üîç Phi√™n', currentSessionId, 'ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω r·ªìi, b·ªè qua');
    }
  }, [timeLeft, currentSessionId, toast, countdownStarted, processedSessions]);

  // Track which trades have been processed to prevent duplicate updates
  const processedTradesRef = useRef<Set<string>>(new Set());

  // Reset countdownStarted v√† isBalanceLocked khi session m·ªõi b·∫Øt ƒë·∫ßu
  useEffect(() => {
    if (timeLeft > 0 && countdownStarted) {
      setCountdownStarted(false);
    }
    if (timeLeft > 0 && isBalanceLocked) {
      setIsBalanceLocked(false);
    }
    // ‚úÖ S·ª¨A: Reset processedSessions khi session m·ªõi b·∫Øt ƒë·∫ßu
    if (timeLeft > 0) {
      setProcessedSessions([]);
    }
  }, [timeLeft, countdownStarted, isBalanceLocked]);

  // Qu·∫£n l√Ω countdown c·∫≠p nh·∫≠t
  useEffect(() => {
    if (updateCountdown === null || updateCountdown <= 0) {
      return;
    }

    const timer = setInterval(() => {
      setUpdateCountdown(prev => {
        if (prev === null || prev <= 1) {
          return null;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [updateCountdown]);



  // C·∫≠p nh·∫≠t ng√†y v√† gi·ªù ch·ªâ ·ªü client
  useEffect(() => {
    const updateDateTime = () => {
      const now = new Date();
      const day = String(now.getDate()).padStart(2, '0');
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const year = now.getFullYear();
      setCurrentDate(`${day}/${month}/${year}`);
      setCurrentTime(new Date().toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', second: '2-digit' }));
    };
    
    // Ch·ªâ c·∫≠p nh·∫≠t khi component ƒë√£ mount (tr√°nh hydration mismatch)
    if (typeof window !== 'undefined') {
      updateDateTime();
      const interval = setInterval(updateDateTime, 1000);
      return () => clearInterval(interval);
    }
  }, []);

  // Tr√°nh g·ªçi syncBalance qu√° th∆∞·ªùng xuy√™n (t·ªëi thi·ªÉu 5 gi√¢y gi·ªØa c√°c l·∫ßn g·ªçi)
  useEffect(() => {
    const now = Date.now();
    const timeSinceLastSync = now - lastBalanceSync;
    const minSyncInterval = 5000; // 5 gi√¢y
    
    if (timeSinceLastSync < minSyncInterval) {
      // console.log('‚è≥ [BALANCE] Ch∆∞a ƒë·ªß th·ªùi gian ƒë·ªÉ sync balance l·∫°i:', Math.ceil((minSyncInterval - timeSinceLastSync) / 1000), 'gi√¢y');
    }
  }, [lastBalanceSync]);

  // C·∫≠p nh·∫≠t symbol bi·ªÉu ƒë·ªì m·∫∑c ƒë·ªãnh
  useEffect(() => {
    setChartSymbol('TVC:GOLD');
  }, []);

  // Handle amount changes
  const addAmount = useCallback((value: number) => {
    setAmount(prev => {
      const current = parseFloat(prev) || 0;
      if (value < 0) return '0'; // Nh·∫•n d·∫•u tr·ª´ th√¨ v·ªÅ 0 lu√¥n
      const newAmount = current + value;
      return newAmount.toString();
    });
  }, []);

  // Handle trade action
  const handleAction = useCallback((direction: "UP" | "DOWN") => {
    const amountValue = parseFloat(amount);
    if (!amount || isNaN(amountValue) || amountValue < 100000) {
      toast({
        title: 'L·ªói',
        description: 'S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 100,000 VND',
        variant: 'destructive',
      });
      return;
    }
    if (amountValue > balance) {
      toast({
        title: 'L·ªói',
        description: 'S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ ƒë·∫∑t l·ªánh',
        variant: 'destructive',
      });
      return;
    }
    setSelectedAction(direction);
    setIsConfirming(true);
  }, [amount, balance, toast]);

  // Handle deposit button click
  const handleDeposit = useCallback(() => {
    router.push('/deposit');
  }, [router]);

  // Confirm trade
  const confirmTrade = useCallback(async () => {
    const token = localStorage.getItem('authToken');
    
    // ‚úÖ TH√äM: Ki·ªÉm tra v√† ngƒÉn multiple calls
    if (isPlacingTrade || isSubmitting) {
      console.log('üîÑ [RACE PREVENTION] ƒêang x·ª≠ l√Ω l·ªánh tr∆∞·ªõc, b·ªè qua request n√†y');
      return;
    }
    
    // Ki·ªÉm tra xem c√≥ ƒëang trong qu√° tr√¨nh loading kh√¥ng
    if (isLoading) {
      toast({
        title: 'ƒêang t·∫£i d·ªØ li·ªáu',
        description: 'Vui l√≤ng ƒë·ª£i h·ªá th·ªëng t·∫£i xong d·ªØ li·ªáu',
        variant: 'destructive',
      });
      return;
    }

    if (!token) {
      toast({
        title: 'L·ªói x√°c th·ª±c',
        description: 'Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
        variant: 'destructive',
      });
      setIsSubmitting(false);
      setIsConfirming(false);
      return;
    }
    if (!selectedAction || !amount || !currentSessionId) {
      toast({
        title: 'Thi·∫øu th√¥ng tin',
        description: `Vui l√≤ng ki·ªÉm tra l·∫°i: ${!selectedAction ? 'h∆∞·ªõng l·ªánh' : ''} ${!amount ? 's·ªë ti·ªÅn' : ''} ${!currentSessionId ? 'phi√™n giao d·ªãch' : ''}`,
        variant: 'destructive',
      });
      setIsSubmitting(false);
      setIsConfirming(false);
      return;
    }

    // Ki·ªÉm tra s·ªë ti·ªÅn h·ª£p l·ªá
    const amountValue = Number(amount);
    if (isNaN(amountValue) || amountValue < 100000) {
      toast({
        title: 'S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá',
        description: 'S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n ho·∫∑c b·∫±ng 100,000 VND',
        variant: 'destructive',
      });
      setIsSubmitting(false);
      setIsConfirming(false);
      return;
    }

    // ‚úÖ SET: Tr·∫°ng th√°i ƒëang ƒë·∫∑t l·ªánh ngay t·ª´ ƒë·∫ßu
    setIsSubmitting(true);
    setIsConfirming(false);
    setIsPlacingTrade(true);

    console.log('üöÄ [TRADE REQUEST] B·∫Øt ƒë·∫ßu ƒë·∫∑t l·ªánh:', { selectedAction, amount, currentSessionId });

    try {
      // Debug log request body
             // L·∫•y t√™n asset t·ª´ symbol hi·ªán t·∫°i
       const getAssetName = (symbol: string) => {
         const symbolMap: Record<string, string> = {
           'TVC:GOLD': 'V√†ng/ƒê√¥ la M·ªπ',
           'XAUUSD': 'V√†ng/ƒê√¥ la M·ªπ',
           'GOLD': 'V√†ng/ƒê√¥ la M·ªπ',
           'OANDA:XAUUSD': 'V√†ng/ƒê√¥ la M·ªπ',
           'TVC:SILVER': 'B·∫°c/ƒê√¥ la M·ªπ',
           'XAGUSD': 'B·∫°c/ƒê√¥ la M·ªπ',
           'EURUSD': 'EUR/USD',
           'GBPUSD': 'GBP/USD',
           'USDJPY': 'USD/JPY',
           'BTCUSD': 'Bitcoin/USD',
           'ETHUSD': 'Ethereum/USD',
           'SPX': 'S&P 500',
           'DJI': 'Dow Jones',
           'IXIC': 'NASDAQ',
         };
         return symbolMap[symbol] || symbol;
       };

       const requestBody = {
         sessionId: currentSessionId,
         type: selectedAction === 'UP' ? 'buy' : 'sell',
         amount: Number(amount)
       };

      // G·ªçi API ƒë·ªÉ ƒë·∫∑t l·ªánh
      const response = await fetch('/api/trades/place', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error('API Error:', {
          status: response.status,
          statusText: response.statusText,
          errorData
        });
        throw new Error(errorData.error || errorData.message || `L·ªói ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      
      if (data.success) {
        
        const newTrade: TradeHistoryRecord = {
          id: data.tradeId || 'unknown',
          sessionId: currentSessionId,
          direction: selectedAction,
          amount: Number(amount),
          status: 'pending',
          result: null,
          profit: 0,
          createdAt: new Date().toISOString(),
        };

        setTradeHistory(prev => {
          // Ki·ªÉm tra xem trade ƒë√£ t·ªìn t·∫°i ch∆∞a
          const existingIndex = prev.findIndex(t => t.id === newTrade.id);
          if (existingIndex >= 0) {
            // C·∫≠p nh·∫≠t trade hi·ªán c√≥
            const updated = [...prev];
            updated[existingIndex] = newTrade;
            return updated;
          } else {
            // Th√™m trade m·ªõi v√†o ƒë·∫ßu
            return [newTrade, ...prev];
          }
        });
        // N·∫øu c√≥ qu·∫£n l√Ω frozen, c√≥ th·ªÉ c·∫≠p nh·∫≠t th√™m ·ªü ƒë√¢y

        setAmount('');
        setSelectedAction(null);

        // C·∫≠p nh·∫≠t s·ªë l·ªánh trong phi√™n hi·ªán t·∫°i
        const tradesInSession = data.tradesInSession || 1;
        setTradesInCurrentSession(tradesInSession);
        
        // Hi·ªÉn th·ªã th√¥ng tin v·ªÅ s·ªë l·ªánh ƒë√£ ƒë·∫∑t trong phi√™n
        const sessionInfo = tradesInSession > 1 ? ` (L·ªánh th·ª© ${tradesInSession} trong phi√™n)` : '';
        
        toast({
          title: '‚úÖ ƒê·∫∑t l·ªánh th√†nh c√¥ng!',
          description: `L·ªánh ${selectedAction === 'UP' ? 'L√äN' : 'XU·ªêNG'} - ${formatCurrency(Number(amount))} - ƒêang ƒë·ª£i k·∫øt qu·∫£${sessionInfo}`,
          duration: 5000, // TƒÉng th·ªùi gian hi·ªÉn th·ªã l√™n 5 gi√¢y
        });

        console.log('üéâ ƒê·∫∑t l·ªánh th√†nh c√¥ng:', {
          tradeId: data.tradeId,
          sessionId: currentSessionId,
          direction: selectedAction,
          amount: Number(amount),
          tradesInSession: tradesInSession,
          balanceAfter: data.balance
        });

        // ‚úÖ C·∫¨P NH·∫¨T BALANCE NGAY (Optimistic UI)
        const tradeAmount = Number(amount);
        setBalance(prev => prev - tradeAmount);
        setFrozenBalance(prev => prev + tradeAmount);
        
        // Socket.IO event s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ª´ server
        console.log('üéâ ƒê·∫∑t l·ªánh th√†nh c√¥ng, Socket.IO s·∫Ω c·∫≠p nh·∫≠t real-time');
      }
    } catch (error) {
      console.error('L·ªói khi ƒë·∫∑t l·ªánh:', error);
      toast({
        title: 'L·ªói',
        description: error instanceof Error ? error.message : 'L·ªói khi ƒë·∫∑t l·ªánh',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
      setIsPlacingTrade(false); // ‚úÖ RESET: Tr·∫°ng th√°i ƒë·∫∑t l·ªánh
    }
  }, [selectedAction, amount, currentSessionId, toast, isBalanceLocked, isPlacingTrade, isSubmitting]);

  // Loading state
  if (isLoading || authLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
        <span className="ml-2">ƒêang t·∫£i d·ªØ li·ªáu...</span>
      </div>
    );
  }

  // Error state
  if (error) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen p-4">
        <AlertCircle className="h-12 w-12 text-red-500 mb-4" />
        <h2 className="text-xl font-semibold mb-2">ƒê√£ x·∫£y ra l·ªói</h2>
        <p className="text-gray-600 mb-4 text-center">{error}</p>
        <Button onClick={() => window.location.reload()}>
          <RefreshCw className="mr-2 h-4 w-4" /> T·∫£i l·∫°i trang
        </Button>
      </div>
    );
  }

  return (
    <div className="max-h-screen h-screen bg-gray-900">
      <div className="p-1 md:p-8">
        <Dialog
          open={false} // ƒê√É XO√Å: Kh√¥ng m·ªü Dialog k·∫øt qu·∫£ th·∫Øng/thua n·ªØa
          onOpenChange={() => {}}
        >
          {/* ƒê√É XO√Å: N·ªôi dung Dialog k·∫øt qu·∫£ th·∫Øng/thua */}
        </Dialog>

        <Dialog open={isConfirming} onOpenChange={setIsConfirming}>
          <DialogContent className="sm:max-w-[425px] bg-gray-800">
            <DialogHeader>
              <DialogTitle className="text-white text-center">
                Phi√™n hi·ªán t·∫°i <span className="text-red-500">{currentSessionId || 'N/A'}</span>
              </DialogTitle>
            </DialogHeader>
            <DialogDescription className="text-gray-300 text-center">
              X√ÅC NH·∫¨N
            </DialogDescription>
            <DialogFooter className="flex gap-2">
              <Button
                type="button"
                variant="outline"
                className="flex-1 bg-red-600 hover:bg-red-700 text-white"
                onClick={() => setIsConfirming(false)}
              >
                H·ªßy
              </Button>
              <Button
                type="button"
                className={`flex-1 ${selectedAction === "UP" ? "bg-green-600 hover:bg-green-700" : "bg-red-600 hover:bg-red-700"}`}
                onClick={confirmTrade}
                disabled={isSubmitting}
              >
                X√°c nh·∫≠n
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        <div className="max-w-7xl mx-auto">
          {/* Desktop Layout - ƒê·∫∑t l·ªánh b√™n tr√°i, bi·ªÉu ƒë·ªì v√† l·ªãch s·ª≠ b√™n ph·∫£i */}
          <div className="hidden lg:grid lg:grid-cols-12 gap-6">
            <div className="lg:col-span-4 space-y-6">
              <Card className="bg-white border border-gray-300 rounded-md shadow">
                <CardHeader>
                  <div className="flex items-center space-x-2">
                    <ChevronDown className="h-4 w-4 text-gray-700" />
                    <CardTitle className="text-gray-900 text-base font-medium">ƒê·∫∑t l·ªánh</CardTitle>
                    <span className="bg-green-600 text-white text-xs font-semibold px-2 py-1 rounded ml-auto" suppressHydrationWarning>
                      Phi√™n: {currentSessionId || 'N/A'}
                    </span>
                  </div>
                </CardHeader>
                                 <CardContent>
                                       {/* Hi·ªÉn th·ªã s·ªë d∆∞ */}
                                       <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                      <div className="flex items-center justify-between text-blue-900">
                        <span className="font-semibold">S·ªê D∆Ø:</span>
                        <span className="text-lg font-bold" suppressHydrationWarning>{formatCurrency(balance || 0)} VND</span>
                      </div>
                      {/* Debug info - ch·ªâ hi·ªÉn th·ªã trong development */}
                      {process.env.NODE_ENV === 'development' && (
                        <div className="mt-2 text-xs text-blue-700">
                          <div>Last Sync: {lastBalanceSync ? new Date(lastBalanceSync).toLocaleTimeString() : 'Never'}</div>
                          <div>Balance Locked: {isBalanceLocked ? 'Yes' : 'No'}</div>
                          <div>Syncing: {isSyncingBalance ? 'Yes' : 'No'}</div>
                          <div className="mt-1 pt-1 border-t border-blue-300">
                            <button 
                              onClick={async () => {
                                try {
                                  const response = await fetch('/api/test-balance', {
                                    headers: {
                                      'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                                    }
                                  });
                                  const data = await response.json();
                                  if (data.success) {
                                    // console.log('üîç [DEBUG] Balance Test Result:', data.data);
                                    alert(`Current: ${data.data.currentBalance.available} | Calculated: ${data.data.calculatedBalance.available}`);
                                  }
                                } catch (error) {
                                  console.error('Debug balance error:', error);
                                }
                              }}
                              className="text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700"
                            >
                              Test Balance
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                   
                   <div className="mb-4">
                     <div className="flex justify-between items-center mb-2">
                       <label htmlFor="amount" className="text-sm text-gray-400">
                         S·ªë ti·ªÅn (VND)
                       </label>
                       <span className="text-xs text-gray-400">T·ªëi thi·ªÉu: {formatCurrency(100000)}</span>
                     </div>
                    <div className="flex items-center space-x-2">
                      <Button variant="outline" size="icon" onClick={() => addAmount(-100000)}>
                        <Minus className="h-4 w-4" />
                      </Button>
                      <Input
                        id="amount"
                        type="text"
                        value={formatAmount(amount)}
                        onChange={(e) => {
                          const raw = e.target.value.replace(/,/g, "");
                          if (/^\d*$/.test(raw)) setAmount(raw);
                        }}
                        placeholder="Nh·∫≠p s·ªë ti·ªÅn"
                        suppressHydrationWarning
                      />
                      <Button variant="outline" size="icon" onClick={() => addAmount(100000)}>
                        <Plus className="h-4 w-4" />
                      </Button>
                    </div>
                    <div className="grid grid-cols-3 gap-2 mt-2">
                      {QUICK_AMOUNTS.map((value) => (
                        <Button
                          key={value}
                          type="button"
                          variant="outline"
                          size="sm"
                          className="text-sm font-semibold bg-white hover:bg-gray-100"
                          onClick={() => addAmount(value)}
                        >
                          {value >= 1000000 ? `+${value / 1000000}M` : `+${value / 1000}K`}
                        </Button>
                      ))}
                    </div>
                  </div>
                  <div className="space-y-1 mb-4 text-sm text-gray-900">
                    <div className="flex justify-between">
                      <span>Ng√†y:</span>
                      <span suppressHydrationWarning>{currentDate}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Gi·ªù:</span>
                      <span suppressHydrationWarning>{currentTime}</span>
                    </div>
                    <div className="flex justify-between font-semibold">
                      <span>Phi√™n hi·ªán t·∫°i:</span>
                      <span suppressHydrationWarning>{currentSessionId || 'N/A'}</span>
                    </div>
                  </div>
                  <div className="mb-4">
                    <div className="border border-red-600 rounded bg-gray-100 text-center py-3">
                      <div className="text-sm text-gray-900">H√£y ƒë·∫∑t l·ªánh:</div>
                      <div className="text-xl font-bold text-red-600" suppressHydrationWarning>{String(timeLeft).padStart(2, '0')}s</div>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <Button
                      type="button"
                      className="w-full h-14 bg-green-600 hover:bg-green-700 text-lg font-bold flex items-center justify-center"
                      onClick={() => handleAction("UP")}
                      disabled={isLoading || !amount || isSubmitting || balance <= 0}
                    >
                      L√äN <ArrowUp className="h-5 w-5 ml-2" />
                    </Button>
                    <Button
                      type="button"
                      className="w-full h-14 bg-red-600 hover:bg-red-700 text-lg font-bold flex items-center justify-center"
                      onClick={() => handleAction("DOWN")}
                      disabled={isLoading || !amount || isSubmitting || balance <= 0}
                    >
                      XU·ªêNG <ArrowDown className="h-5 w-5 ml-2" />
                    </Button>
                    
                    {/* Th√¥ng b√°o h·∫øt ti·ªÅn trong form ƒë·∫∑t l·ªánh */}
                    {balance <= 0 && (
                      <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                        <div className="flex items-center space-x-2 mb-2">
                          <AlertCircle className="h-4 w-4 text-red-500" />
                          <span className="text-red-700 font-semibold text-sm">Kh√¥ng th·ªÉ ƒë·∫∑t l·ªánh</span>
                        </div>
                        <p className="text-red-600 text-xs mb-2">
                          S·ªë d∆∞ kh√¥ng ƒë·ªß. Vui l√≤ng n·∫°p ti·ªÅn tr∆∞·ªõc.
                        </p>
                        <Button 
                          onClick={handleDeposit}
                          size="sm"
                          className="w-full bg-red-600 hover:bg-red-700 text-white text-xs"
                        >
                          <Wallet className="h-3 w-3 mr-1" />
                          N·∫°p ti·ªÅn
                        </Button>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-white border-gray-300 rounded-md shadow">
                <CardHeader>
                  <CardTitle className="text-gray-900">C·∫≠p nh·∫≠t</CardTitle>
                </CardHeader>
                <CardContent>
                  <LiquidityTable />
                </CardContent>
              </Card>
            </div>

            <div className="lg:col-span-8 space-y-6">
              {/* Market Data Ticker */}
              <Card className="bg-white border-gray-300 rounded-md shadow">
                <CardContent className="p-0">
                  <TradingViewTickerTape />
                </CardContent>
              </Card>

                             {/* Advanced Chart */}
               <Card className="bg-white border-gray-500 rounded-md shadow h-[500px]">
                 <CardContent className="p-2 h-full">
                   <TradingViewAdvancedChart 
                     key={chartSymbol} 
                     symbol={chartSymbol} 
                     interval="1"
                   />
                 </CardContent>
               </Card>

              {/* Trade History */}
              <TradeHistory tradeHistory={tradeHistory} formatCurrency={formatCurrency} />

              {/* Liquidity Table */}
              <Card className="bg-white border-gray-300 rounded-md shadow">
                <CardHeader>
                  <CardTitle className="text-gray-900">Thanh kho·∫£n</CardTitle>
                </CardHeader>
                <CardContent>
                  <LiquidityTable />
                </CardContent>
              </Card>
            </div>
          </div>

          {/* Mobile Layout - Th·ª© t·ª±: Bi·ªÉu ƒë·ªì ‚Üí S·ªë d∆∞ ‚Üí ƒê·∫∑t l·ªánh ‚Üí L·ªãch s·ª≠ giao d·ªãch - Full m√†n h√¨nh v·ªõi margin nh·∫π */}
          <div className="lg:hidden space-y-2 min-h-screen">
            {/* 1. Bi·ªÉu ƒë·ªì */}
            <div className="space-y-2">
              {/* Market Data Ticker */}
              <Card className="bg-white border border-gray-200 rounded-lg shadow-sm">
                <CardContent className="p-0">
                  <TradingViewTickerTape />
                </CardContent>
              </Card>

                             {/* Advanced Chart */}
               <Card className="bg-white border border-gray-200 rounded-lg shadow-sm h-[400px]">
                 <CardContent className="p-0 h-full">
                   <TradingViewAdvancedChart 
                     key={chartSymbol} 
                     symbol={chartSymbol} 
                     interval="1"
                   />
                 </CardContent>
               </Card>
            </div>

            {/* 3. ƒê·∫∑t l·ªánh */}
            <Card className="bg-white border border-gray-200 rounded-lg shadow-sm">
              <CardHeader>
                <div className="flex items-center space-x-2">
                  <ChevronDown className="h-4 w-4 text-gray-700" />
                  <CardTitle className="text-gray-900 text-base font-medium">ƒê·∫∑t l·ªánh</CardTitle>
                  <span className="bg-green-600 text-white text-xs font-semibold px-2 py-1 rounded ml-auto" suppressHydrationWarning>
                    Phi√™n: {currentSessionId || 'N/A'}
                  </span>
                </div>
              </CardHeader>
                             <CardContent>
                 {/* Hi·ªÉn th·ªã s·ªë d∆∞ */}
                                   <div className="mb-3 p-2 bg-blue-50 border border-blue-200 rounded-lg">
                    <div className="flex items-center justify-between text-blue-900">
                      <span className="font-semibold text-sm">S·ªê D∆Ø:</span>
                      <span className="text-base font-bold" suppressHydrationWarning>{formatCurrency(balance || 0)} VND</span>
                    </div>
                    {/* Debug info - ch·ªâ hi·ªÉn th·ªã trong development */}
                    {process.env.NODE_ENV === 'development' && (
                      <div className="mt-1 text-xs text-blue-700">
                        <div>Last Sync: {lastBalanceSync ? new Date(lastBalanceSync).toLocaleTimeString() : 'Never'}</div>
                        <div>Balance Locked: {isBalanceLocked ? 'Yes' : 'No'}</div>
                        <div>Syncing: {isSyncingBalance ? 'Yes' : 'No'}</div>
                        <div className="mt-1 pt-1 border-t border-blue-300">
                          <button 
                            onClick={async () => {
                              try {
                                const response = await fetch('/api/test-balance', {
                                  headers: {
                                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                                  }
                                });
                                const data = await response.json();
                                if (data.success) {
                                  // console.log('üîç [DEBUG] Balance Test Result:', data.data);
                                  alert(`Current: ${data.data.currentBalance.available} | Calculated: ${data.data.calculatedBalance.available}`);
                                }
                              } catch (error) {
                                console.error('Debug balance error:', error);
                              }
                            }}
                            className="text-xs bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700"
                          >
                            Test Balance
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                 
                 <div className="mb-3">
                   <div className="flex justify-between items-center mb-2">
                     <label htmlFor="amount-mobile" className="text-sm text-gray-400">
                       S·ªë ti·ªÅn (VND)
                     </label>
                     <span className="text-xs text-gray-400">T·ªëi thi·ªÉu: {formatCurrency(100000)}</span>
                   </div>
                  <div className="flex items-center space-x-1">
                    <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => addAmount(-100000)}>
                      <Minus className="h-3 w-3" />
                    </Button>
                    <Input
                      id="amount-mobile"
                      type="text"
                      value={formatAmount(amount)}
                      onChange={(e) => {
                        const raw = e.target.value.replace(/,/g, "");
                        if (/^\d*$/.test(raw)) setAmount(raw);
                      }}
                      placeholder="Nh·∫≠p s·ªë ti·ªÅn"
                      suppressHydrationWarning
                    />
                    <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => addAmount(100000)}>
                      <Plus className="h-3 w-3" />
                    </Button>
                  </div>
                  <div className="grid grid-cols-4 gap-1 mt-2">
                    {QUICK_AMOUNTS.map((value) => (
                      <Button
                        key={value}
                        type="button"
                        variant="outline"
                        size="sm"
                        className="text-xs font-semibold bg-white hover:bg-gray-100 h-8"
                        onClick={() => addAmount(value)}
                      >
                        {value >= 1000000 ? `+${value / 1000000}M` : `+${value / 1000}K`}
                      </Button>
                    ))}
                  </div>
                </div>
                <div className="space-y-1 mb-4 text-xs text-gray-900">
                  <div className="flex justify-between">
                    <span>Ng√†y:</span>
                    <span suppressHydrationWarning>{currentDate}</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Gi·ªù:</span>
                    <span suppressHydrationWarning>{currentTime}</span>
                  </div>
                  <div className="flex justify-between font-semibold">
                    <span>Phi√™n hi·ªán t·∫°i:</span>
                    <span suppressHydrationWarning>{currentSessionId || 'N/A'}</span>
                  </div>
                </div>
                <div className="mb-4">
                  <div className="border border-red-600 rounded bg-gray-100 text-center py-2">
                    <div className="text-xs text-gray-900">H√£y ƒë·∫∑t l·ªánh:</div>
                    <div className="text-lg font-bold text-red-600" suppressHydrationWarning>{String(timeLeft).padStart(2, '0')}s</div>
                  </div>
                </div>
                <div className="space-y-3">
                  <Button
                    type="button"
                    className="w-full h-12 bg-green-600 hover:bg-green-700 text-base font-bold flex items-center justify-center"
                    onClick={() => handleAction("UP")}
                    disabled={isLoading || !amount || isSubmitting || balance <= 0}
                  >
                    L√äN <ArrowUp className="h-4 w-4 ml-2" />
                  </Button>
                  <Button
                    type="button"
                    className="w-full h-12 bg-red-600 hover:bg-red-700 text-base font-bold flex items-center justify-center"
                    onClick={() => handleAction("DOWN")}
                    disabled={isLoading || !amount || isSubmitting || balance <= 0}
                  >
                    XU·ªêNG <ArrowDown className="h-4 w-4 ml-2" />
                  </Button>
                  
                  {/* Th√¥ng b√°o h·∫øt ti·ªÅn trong form ƒë·∫∑t l·ªánh */}
                  {balance <= 0 && (
                    <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                      <div className="flex items-center space-x-2 mb-2">
                        <AlertCircle className="h-4 w-4 text-red-500" />
                        <span className="text-red-700 font-semibold text-sm">Kh√¥ng th·ªÉ ƒë·∫∑t l·ªánh</span>
                      </div>
                      <p className="text-red-600 text-xs mb-2">
                        S·ªë d∆∞ kh√¥ng ƒë·ªß. Vui l√≤ng n·∫°p ti·ªÅn tr∆∞·ªõc.
                      </p>
                      <Button 
                        onClick={handleDeposit}
                        size="sm"
                        className="w-full bg-red-600 hover:bg-red-700 text-white text-xs"
                      >
                        <Wallet className="h-3 w-3 mr-1" />
                        N·∫°p ti·ªÅn
                      </Button>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* 4. L·ªãch s·ª≠ giao d·ªãch */}
            <TradeHistory tradeHistory={tradeHistory} formatCurrency={formatCurrency} />

            {/* 5. C·∫≠p nh·∫≠t */}
            <Card className="bg-white border border-gray-200 rounded-lg shadow-sm">
              <CardHeader>
                <CardTitle className="text-gray-900">C·∫≠p nh·∫≠t</CardTitle>
              </CardHeader>
              <CardContent>
                <LiquidityTable />
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}