import { ObjectId } from 'mongodb';

/**
 * T·∫°o sessionId d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i
 * ƒê·ªãnh d·∫°ng: YYMMDDHHmm (V√≠ d·ª•: 2507111927 cho 19:27 ng√†y 11/07/2025)
 */
export function generateSessionId(date: Date = new Date()): string {
  const year = date.getUTCFullYear().toString();
  const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
  const day = date.getUTCDate().toString().padStart(2, '0');
  const hours = date.getUTCHours().toString().padStart(2, '0');
  const minutes = date.getUTCMinutes().toString().padStart(2, '0');
  return `${year}${month}${day}${hours}${minutes}`;
}

/**
 * L·∫•y th√¥ng tin t·ª´ sessionId
 */
export const parseSessionId = (sessionId: string) => {
  if (!sessionId || sessionId.length !== 10) return null;
  
  const year = parseInt(sessionId.slice(0, 2), 10) + 2000; // Gi·∫£ s·ª≠ th·∫ø k·ª∑ 21
  const month = parseInt(sessionId.slice(2, 4), 10) - 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
  const day = parseInt(sessionId.slice(4, 6), 10);
  const hour = parseInt(sessionId.slice(6, 8), 10);
  const minute = parseInt(sessionId.slice(8, 10), 10);
  
  // T·∫°o ƒë·ªëi t∆∞·ª£ng Date v·ªõi m√∫i gi·ªù Vi·ªát Nam
  const date = new Date(Date.UTC(year, month, day, hour - 7, minute)); // UTC+7
  
  return {
    date,
    year,
    month: month + 1,
    day,
    hour,
    minute,
    // Th√™m c√°c th√¥ng tin h·ªØu √≠ch kh√°c n·∫øu c·∫ßn
    formattedTime: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
    formattedDate: `${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`
  };
};

// H√†m x·ª≠ l√Ω phi√™n h·∫øt h·∫°n v√† c√¥ng b·ªë k·∫øt qu·∫£
export async function processExpiredSessions(db: any, apiName: string = 'Unknown') {
  const now = new Date();
  
  // T√¨m c√°c phi√™n ƒë√£ h·∫øt h·∫°n nh∆∞ng ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
  const expiredSessions = await db.collection('trading_sessions').find({
    status: { $in: ['ACTIVE', 'PREDICTED'] },
    endTime: { $lte: now }
  }).toArray();

  console.log(`üîç [${apiName}] T√¨m th·∫•y ${expiredSessions.length} phi√™n ƒë√£ h·∫øt h·∫°n c·∫ßn x·ª≠ l√Ω (ch·ªâ x·ª≠ l√Ω phi√™n c√≥ k·∫øt qu·∫£ s·∫µn)`);

  for (const session of expiredSessions) {
    try {
      console.log(`üîÑ [${apiName}] ƒêang x·ª≠ l√Ω phi√™n: ${session.sessionId}`);
      
      // 1. Ki·ªÉm tra xem admin ƒë√£ ƒë·∫∑t k·∫øt qu·∫£ ch∆∞a
      let result = session.result;
      let createdBy = session.createdBy || 'system';
      
      if (!result) {
        // N·∫øu ch∆∞a c√≥ k·∫øt qu·∫£, b·ªè qua phi√™n n√†y (ƒë·ªÉ cron job x·ª≠ l√Ω)
        console.log(`‚ö†Ô∏è [${apiName}] Phi√™n ${session.sessionId} kh√¥ng c√≥ k·∫øt qu·∫£, b·ªè qua (ƒë·ªÉ cron job x·ª≠ l√Ω)`);
        continue;
      } else {
        console.log(`üëë [${apiName}] S·ª≠ d·ª•ng k·∫øt qu·∫£ c√≥ s·∫µn cho phi√™n ${session.sessionId}: ${result}`);
      }

      // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n th√†nh COMPLETED
      await db.collection('trading_sessions').updateOne(
        { _id: session._id },
        { 
          $set: { 
            status: 'COMPLETED',
            result: result,
            actualResult: result, // L∆∞u k·∫øt qu·∫£ th·ª±c t·∫ø
            createdBy: createdBy,
            completedAt: now,
            updatedAt: now
          }
        }
      );

      console.log(`üìä [${apiName}] Phi√™n ${session.sessionId} k·∫øt qu·∫£: ${result}`);

      // 3. L·∫•y t·∫•t c·∫£ l·ªánh c·ªßa phi√™n n√†y
      const trades = await db.collection('trades').find({ 
        sessionId: session.sessionId, 
        status: 'pending' 
      }).toArray();

      console.log(`üìã [${apiName}] T√¨m th·∫•y ${trades.length} l·ªánh c·∫ßn x·ª≠ l√Ω`);

      for (const trade of trades) {
        // 4. X√°c ƒë·ªãnh win/lose
        const isWin = trade.direction === result;
        const profit = isWin ? Math.floor(trade.amount * 0.9) : 0; // Th·∫Øng ƒë∆∞·ª£c 90%
        const newStatus = 'completed';

        // 5. C·∫≠p nh·∫≠t l·ªánh
        await db.collection('trades').updateOne(
          { _id: trade._id },
          { 
            $set: { 
              status: newStatus, 
              result: isWin ? 'win' : 'lose', 
              profit: profit,
              updatedAt: now
            }
          }
        );

        // 6. C·∫≠p nh·∫≠t s·ªë d∆∞ user
        if (isWin) {
          // ‚úÖ S·ª¨A L·ªñI: S·ª≠ d·ª•ng $set thay v√¨ $inc ƒë·ªÉ tr√°nh race condition
          // 1. Tr·∫£ l·∫°i ti·ªÅn g·ªëc t·ª´ frozen v·ªÅ available
          // 2. C·ªông th√™m profit v√†o available
          
          // L·∫•y balance hi·ªán t·∫°i c·ªßa user
          const currentUser = await db.collection('users').findOne({ _id: new ObjectId(trade.userId) });
          if (currentUser) {
            // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
            let currentBalance = currentUser.balance || { available: 0, frozen: 0 };
            
            // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
            if (typeof currentBalance === 'number') {
              currentBalance = {
                available: currentBalance,
                frozen: 0
              };
              
              console.log(`üîÑ [${apiName} MIGRATION] User ${currentUser.username}: Chuy·ªÉn ƒë·ªïi balance t·ª´ number sang object`);
            }

            // T√≠nh to√°n balance m·ªõi
            const newAvailableBalance = currentBalance.available + trade.amount + profit;
            const newFrozenBalance = currentBalance.frozen - trade.amount;

            await db.collection('users').updateOne(
              { _id: new ObjectId(trade.userId) },
              { 
                $set: { 
                  balance: {
                    available: newAvailableBalance,
                    frozen: newFrozenBalance
                  },
                  updatedAt: now
                }
              }
            );
            
            console.log(`üí∞ [${apiName}] User ${currentUser.username} th·∫Øng: available ${currentBalance.available} ‚Üí ${newAvailableBalance} (+${trade.amount + profit}), frozen ${currentBalance.frozen} ‚Üí ${newFrozenBalance} (-${trade.amount})`);
          }
        } else {
          // Thua: ch·ªâ tr·ª´ ti·ªÅn c∆∞·ª£c (ƒë√£ b·ªã ƒë√≥ng bƒÉng)
          const currentUser = await db.collection('users').findOne({ _id: new ObjectId(trade.userId) });
          if (currentUser) {
            // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
            let currentBalance = currentUser.balance || { available: 0, frozen: 0 };
            
            // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
            if (typeof currentBalance === 'number') {
              currentBalance = {
                available: currentBalance,
                frozen: 0
              };
              
              console.log(`üîÑ [${apiName} MIGRATION] User ${currentUser.username}: Chuy·ªÉn ƒë·ªïi balance t·ª´ number sang object`);
            }

            // T√≠nh to√°n balance m·ªõi
            const newFrozenBalance = currentBalance.frozen - trade.amount;

            await db.collection('users').updateOne(
              { _id: new ObjectId(trade.userId) },
              { 
                $set: { 
                  balance: {
                    ...currentBalance,
                    frozen: newFrozenBalance
                  },
                  updatedAt: now
                }
              }
            );
            
            console.log(`üí∏ [${apiName}] User ${currentUser.username} thua: frozen ${currentBalance.frozen} ‚Üí ${newFrozenBalance} (-${trade.amount})`);
          }
        }
      }

      console.log(`‚úÖ [${apiName}] Ho√†n th√†nh x·ª≠ l√Ω phi√™n ${session.sessionId}`);
    } catch (error) {
      console.error(`‚ùå [${apiName}] L·ªói khi x·ª≠ l√Ω phi√™n ${session.sessionId}:`, error);
    }
  }
}
