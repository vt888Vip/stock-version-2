import mongoose from 'mongoose';

// Define interface for the cached MongoDB connection
interface MongooseCache {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

// Define types for global mongoose cache
declare global {
  var mongoose: MongooseCache | undefined;
}

const MONGODB_URI = process.env.MONGODB_URI;

// Log ƒë·ªÉ debug
console.log('ƒêang ki·ªÉm tra MONGODB_URI:', {
  MONGODB_URI: MONGODB_URI ? 'ƒê√£ c·∫•u h√¨nh' : 'Ch∆∞a c·∫•u h√¨nh',
  NODE_ENV: process.env.NODE_ENV,
  CWD: process.cwd()
});

if (!MONGODB_URI) {
  console.error('L·ªói: MONGODB_URI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong file .env.local');
  process.exit(1);
}

const MONGODB_DB = process.env.MONGODB_DB || 'financial_platform';

// Initialize the cached variable with proper typing
let cached: MongooseCache = global.mongoose || { conn: null, promise: null };

// Set the global mongoose object if it doesn't exist
if (!global.mongoose) {
  global.mongoose = cached;
}

export async function connectToDatabase() {
  console.log('ƒêang thi·∫øt l·∫≠p k·∫øt n·ªëi t·ªõi MongoDB Atlas...');
  
  if (cached.conn) {
    console.log('S·ª≠ d·ª•ng k·∫øt n·ªëi database ƒë√£ ƒë∆∞·ª£c cache');
    return cached.conn;
  }

  if (!cached.promise) {
    console.log('T·∫°o k·∫øt n·ªëi m·ªõi t·ªõi MongoDB...');
    
    if (!MONGODB_URI) {
      throw new Error('MONGODB_URI kh√¥ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a');
    }

    const opts: mongoose.ConnectOptions = {
      bufferCommands: false,
      serverSelectionTimeoutMS: 10000, // TƒÉng timeout l√™n 10 gi√¢y
      socketTimeoutMS: 45000,
      retryWrites: true,
      w: 'majority',
      appName: 'TradingApp',
    };

    console.log(`K·∫øt n·ªëi t·ªõi MongoDB v·ªõi URI: ${MONGODB_URI.split('@')[1]?.split('?')[0] || MONGODB_URI}`);

    cached.promise = mongoose.connect(MONGODB_URI, opts)
      .then((mongoose) => {
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi MongoDB Atlas');
        return mongoose;
      })
      .catch((error) => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', error.message);
        throw error;
      });
  }

  try {
    console.log('Waiting for database connection...');
    cached.conn = await cached.promise;
    console.log('Database connection established');
  } catch (e) {
    console.error('Failed to connect to MongoDB:', e);
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

/**
 * H√†m tr·ª£ gi√∫p ƒë·ªÉ l·∫•y MongoDB client connection t·ª´ mongoose
 * S·ª≠ d·ª•ng trong c√°c API route ƒë·ªÉ truy c·∫≠p collection
 */
export async function getMongoDb() {
  try {
    console.log('üîÑ ƒêang l·∫•y k·∫øt n·ªëi MongoDB...');
    
    if (!MONGODB_URI) {
      throw new Error('MONGODB_URI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh');
    }
    
    await connectToDatabase();
    
    if (!mongoose.connection.db) {
      throw new Error('Kh√¥ng th·ªÉ thi·∫øt l·∫≠p k·∫øt n·ªëi MongoDB');
    }
    
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi database:', mongoose.connection.db.databaseName);
    return mongoose.connection.db;
  } catch (error) {
    console.error('‚ùå L·ªói khi k·∫øt n·ªëi MongoDB:', error instanceof Error ? error.message : 'Unknown error');
    throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
  }
}
