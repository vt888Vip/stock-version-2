import amqp, { Channel, Connection } from 'amqplib';

// C·∫•u h√¨nh RabbitMQ
const RABBITMQ_URL = process.env.RABBITMQ_URL || 'amqp://localhost:5672';
const TRADE_QUEUE = 'trade_orders';
const TRADE_RESULT_QUEUE = 'trade_results';

let connection: Connection | null = null;
let channel: Channel | null = null;

/**
 * K·∫øt n·ªëi ƒë·∫øn RabbitMQ
 */
export async function connectRabbitMQ(): Promise<{ connection: Connection; channel: Channel }> {
  try {
    if (!connection) {
      console.log('üîå K·∫øt n·ªëi RabbitMQ...');
      connection = await amqp.connect(RABBITMQ_URL);
      
      connection.on('error', (error) => {
        console.error('‚ùå RabbitMQ connection error:', error);
        connection = null;
        channel = null;
      });

      connection.on('close', () => {
        console.log('üîå RabbitMQ connection closed');
        connection = null;
        channel = null;
      });
    }

    if (!channel) {
      channel = await connection.createChannel();
      
      // T·∫°o queue cho l·ªánh ƒë·∫∑t
      await channel.assertQueue(TRADE_QUEUE, {
        durable: true, // Queue s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ khi restart
        maxPriority: 10 // H·ªó tr·ª£ priority
      });

      // T·∫°o queue cho k·∫øt qu·∫£
      await channel.assertQueue(TRADE_RESULT_QUEUE, {
        durable: true
      });

      console.log('‚úÖ RabbitMQ connected v√† queues ƒë√£ ƒë∆∞·ª£c t·∫°o');
    }

    return { connection, channel };
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi RabbitMQ:', error);
    throw error;
  }
}

/**
 * G·ª≠i l·ªánh ƒë·∫∑t v√†o queue
 */
export async function sendTradeOrder(orderData: {
  sessionId: string;
  userId: string;
  direction: 'UP' | 'DOWN';
  amount: number;
  priority?: number;
}): Promise<boolean> {
  try {
    const { channel } = await connectRabbitMQ();
    
    const message = {
      ...orderData,
      timestamp: new Date().toISOString(),
      id: `trade_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };

    const success = channel.sendToQueue(
      TRADE_QUEUE,
      Buffer.from(JSON.stringify(message)),
      {
        persistent: true, // Message s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ
        priority: orderData.priority || 0
      }
    );

    if (success) {
      console.log(`üì§ ƒê√£ g·ª≠i l·ªánh v√†o queue: ${message.id}`);
      return true;
    } else {
      console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i l·ªánh v√†o queue');
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i l·ªánh v√†o queue:', error);
    return false;
  }
}

/**
 * X·ª≠ l√Ω l·ªánh ƒë·∫∑t t·ª´ queue
 */
export async function processTradeOrder(
  callback: (orderData: any) => Promise<{ success: boolean; result?: any; error?: string }>
): Promise<void> {
  try {
    const { channel } = await connectRabbitMQ();
    
    console.log('üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω l·ªánh ƒë·∫∑t t·ª´ queue...');
    
    // Thi·∫øt l·∫≠p prefetch ƒë·ªÉ ch·ªâ x·ª≠ l√Ω 1 message t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
    await channel.prefetch(1);
    
    channel.consume(TRADE_QUEUE, async (msg) => {
      if (!msg) return;

      try {
        const orderData = JSON.parse(msg.content.toString());
        console.log(`üì• Nh·∫≠n l·ªánh t·ª´ queue: ${orderData.id}`);

        // X·ª≠ l√Ω l·ªánh
        const result = await callback(orderData);

        if (result.success) {
          // G·ª≠i k·∫øt qu·∫£ th√†nh c√¥ng v√†o queue k·∫øt qu·∫£
          await sendTradeResult({
            orderId: orderData.id,
            success: true,
            result: result.result,
            timestamp: new Date().toISOString()
          });

          // Acknowledge message
          channel.ack(msg);
          console.log(`‚úÖ X·ª≠ l√Ω l·ªánh th√†nh c√¥ng: ${orderData.id}`);
        } else {
          // G·ª≠i k·∫øt qu·∫£ l·ªói v√†o queue k·∫øt qu·∫£
          await sendTradeResult({
            orderId: orderData.id,
            success: false,
            error: result.error,
            timestamp: new Date().toISOString()
          });

          // Acknowledge message (kh√¥ng retry ƒë·ªÉ tr√°nh loop v√¥ h·∫°n)
          channel.ack(msg);
          console.log(`‚ùå X·ª≠ l√Ω l·ªánh th·∫•t b·∫°i: ${orderData.id} - ${result.error}`);
        }

      } catch (error) {
        console.error(`‚ùå L·ªói x·ª≠ l√Ω l·ªánh:`, error);
        
        // G·ª≠i k·∫øt qu·∫£ l·ªói
        try {
          const orderData = JSON.parse(msg.content.toString());
          await sendTradeResult({
            orderId: orderData.id,
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error',
            timestamp: new Date().toISOString()
          });
        } catch (parseError) {
          console.error('‚ùå L·ªói parse message:', parseError);
        }

        // Acknowledge message ƒë·ªÉ tr√°nh loop
        channel.ack(msg);
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói thi·∫øt l·∫≠p consumer:', error);
  }
}

/**
 * G·ª≠i k·∫øt qu·∫£ x·ª≠ l√Ω v√†o queue k·∫øt qu·∫£
 */
export async function sendTradeResult(resultData: {
  orderId: string;
  success: boolean;
  result?: any;
  error?: string;
  timestamp: string;
}): Promise<boolean> {
  try {
    const { channel } = await connectRabbitMQ();
    
    const success = channel.sendToQueue(
      TRADE_RESULT_QUEUE,
      Buffer.from(JSON.stringify(resultData)),
      { persistent: true }
    );

    if (success) {
      console.log(`üì§ ƒê√£ g·ª≠i k·∫øt qu·∫£ v√†o queue: ${resultData.orderId}`);
      return true;
    } else {
      console.error('‚ùå Kh√¥ng th·ªÉ g·ª≠i k·∫øt qu·∫£ v√†o queue');
      return false;
    }
  } catch (error) {
    console.error('‚ùå L·ªói g·ª≠i k·∫øt qu·∫£ v√†o queue:', error);
    return false;
  }
}

/**
 * L·∫•y k·∫øt qu·∫£ x·ª≠ l√Ω t·ª´ queue
 */
export async function getTradeResult(orderId: string, timeout: number = 30000): Promise<any> {
  return new Promise(async (resolve, reject) => {
    try {
      const { channel } = await connectRabbitMQ();
      
      const timeoutId = setTimeout(() => {
        reject(new Error('Timeout waiting for trade result'));
      }, timeout);

      const checkResult = async () => {
        try {
          const msg = await channel.get(TRADE_RESULT_QUEUE);
          
          if (msg) {
            const result = JSON.parse(msg.content.toString());
            
            if (result.orderId === orderId) {
              clearTimeout(timeoutId);
              channel.ack(msg);
              resolve(result);
              return;
            } else {
              // N·∫øu kh√¥ng ph·∫£i k·∫øt qu·∫£ c·∫ßn t√¨m, ƒë·∫∑t l·∫°i v√†o queue
              channel.nack(msg, false, true);
            }
          }
          
          // Ki·ªÉm tra l·∫°i sau 100ms
          setTimeout(checkResult, 100);
        } catch (error) {
          clearTimeout(timeoutId);
          reject(error);
        }
      };

      checkResult();

    } catch (error) {
      reject(error);
    }
  });
}

/**
 * ƒê√≥ng k·∫øt n·ªëi RabbitMQ
 */
export async function closeRabbitMQ(): Promise<void> {
  try {
    if (channel) {
      await channel.close();
      channel = null;
    }
    if (connection) {
      await connection.close();
      connection = null;
    }
    console.log('üîå RabbitMQ connection closed');
  } catch (error) {
    console.error('‚ùå L·ªói ƒë√≥ng RabbitMQ connection:', error);
  }
}

/**
 * L·∫•y th√¥ng tin queue
 */
export async function getQueueInfo(): Promise<{
  tradeQueue: { messageCount: number; consumerCount: number };
  resultQueue: { messageCount: number; consumerCount: number };
}> {
  try {
    const { channel } = await connectRabbitMQ();
    
    const tradeQueueInfo = await channel.checkQueue(TRADE_QUEUE);
    const resultQueueInfo = await channel.checkQueue(TRADE_RESULT_QUEUE);

    return {
      tradeQueue: {
        messageCount: tradeQueueInfo.messageCount,
        consumerCount: tradeQueueInfo.consumerCount
      },
      resultQueue: {
        messageCount: resultQueueInfo.messageCount,
        consumerCount: resultQueueInfo.consumerCount
      }
    };
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y th√¥ng tin queue:', error);
    throw error;
  }
}
