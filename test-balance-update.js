// Test script ƒë·ªÉ ki·ªÉm tra balance update ngay l·∫≠p t·ª©c
const BASE_URL = 'http://localhost:3000';

// Gi·∫£ l·∫≠p token (c·∫ßn thay b·∫±ng token th·∫≠t)
const TOKEN = 'your_token_here';

async function testBalanceUpdate() {
  console.log('üß™ Test Balance Update Ngay L·∫≠p T·ª©c...\n');

  try {
    // Test 1: L·∫•y balance hi·ªán t·∫°i
    console.log('1Ô∏è‚É£ L·∫•y balance hi·ªán t·∫°i...');
    const balanceResponse = await fetch(`${BASE_URL}/api/user/balance`, {
      headers: {
        'Authorization': `Bearer ${TOKEN}`
      }
    });

    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      if (balanceData.success) {
        console.log('üí∞ Balance hi·ªán t·∫°i:', {
          available: balanceData.balance.available,
          frozen: balanceData.balance.frozen,
          total: balanceData.balance.total
        });
      } else {
        console.log('‚ùå L·∫•y balance:', balanceData.message);
        return;
      }
    } else {
      console.log('‚ùå L·∫•y balance:', balanceResponse.status);
      return;
    }

    // Test 2: ƒê·∫∑t l·ªánh v√† ki·ªÉm tra balance update
    console.log('\n2Ô∏è‚É£ ƒê·∫∑t l·ªánh v√† ki·ªÉm tra balance update...');
    const amount = 100000; // 100k VND
    const sessionId = '202501271200'; // Session ID m·∫´u
    
    const tradeResponse = await fetch(`${BASE_URL}/api/trades/place`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${TOKEN}`
      },
      body: JSON.stringify({
        sessionId,
        direction: 'UP',
        amount
      })
    });

    if (tradeResponse.ok) {
      const tradeData = await tradeResponse.json();
      if (tradeData.success) {
        console.log('‚úÖ ƒê·∫∑t l·ªánh th√†nh c√¥ng!');
        console.log('üìä Th√¥ng tin balance:');
        console.log('   - Balance tr∆∞·ªõc:', tradeData.balanceBefore);
        console.log('   - Balance sau:', tradeData.balanceAfter);
        console.log('   - Thay ƒë·ªïi available:', tradeData.balanceBefore.available - tradeData.balanceAfter.available);
        console.log('   - Thay ƒë·ªïi frozen:', tradeData.balanceAfter.frozen - tradeData.balanceBefore.frozen);
        
        // Ki·ªÉm tra t√≠nh ch√≠nh x√°c
        const expectedAvailable = tradeData.balanceBefore.available - amount;
        const expectedFrozen = tradeData.balanceBefore.frozen + amount;
        
        if (tradeData.balanceAfter.available === expectedAvailable && 
            tradeData.balanceAfter.frozen === expectedFrozen) {
          console.log('‚úÖ Balance update ch√≠nh x√°c!');
        } else {
          console.log('‚ùå Balance update kh√¥ng ch√≠nh x√°c!');
        }
      } else {
        console.log('‚ùå ƒê·∫∑t l·ªánh th·∫•t b·∫°i:', tradeData.message);
      }
    } else {
      console.log('‚ùå ƒê·∫∑t l·ªánh:', tradeResponse.status);
    }

    // Test 3: Ki·ªÉm tra balance sau khi ƒë·∫∑t l·ªánh
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra balance sau khi ƒë·∫∑t l·ªánh...');
    const balanceAfterResponse = await fetch(`${BASE_URL}/api/user/balance`, {
      headers: {
        'Authorization': `Bearer ${TOKEN}`
      }
    });

    if (balanceAfterResponse.ok) {
      const balanceAfterData = await balanceAfterResponse.json();
      if (balanceAfterData.success) {
        console.log('üí∞ Balance sau khi ƒë·∫∑t l·ªánh:', {
          available: balanceAfterData.balance.available,
          frozen: balanceAfterData.balance.frozen,
          total: balanceAfterData.balance.total
        });
      }
    }

    console.log('\nüéâ Test ho√†n th√†nh!');
    console.log('üìù K·∫øt qu·∫£ mong ƒë·ª£i:');
    console.log('   - Balance available gi·∫£m ƒë√∫ng s·ªë ti·ªÅn ƒë·∫∑t l·ªánh');
    console.log('   - Balance frozen tƒÉng ƒë√∫ng s·ªë ti·ªÅn ƒë·∫∑t l·ªánh');
    console.log('   - Frontend c·∫≠p nh·∫≠t balance ngay l·∫≠p t·ª©c');
    console.log('   - Kh√¥ng c√≥ race condition');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testBalanceUpdate();
