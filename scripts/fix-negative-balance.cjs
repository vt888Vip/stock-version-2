const mongoose = require('mongoose');

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/financial_platform';

async function fixNegativeBalance() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    // T√¨m t·∫•t c·∫£ users c√≥ balance.frozen √¢m
    const usersWithNegativeFrozen = await db.collection('users').find({
      'balance.frozen': { $lt: 0 }
    }).toArray();

    console.log(`üìä T√¨m th·∫•y ${usersWithNegativeFrozen.length} users c√≥ balance.frozen √¢m`);

    if (usersWithNegativeFrozen.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ user n√†o c√≥ balance.frozen √¢m');
      return;
    }

    // S·ª≠a balance cho t·ª´ng user
    for (const user of usersWithNegativeFrozen) {
      console.log(`üîÑ ƒêang s·ª≠a balance cho user ${user._id}:`);
      console.log(`   - Balance tr∆∞·ªõc: available=${user.balance?.available || 0}, frozen=${user.balance?.frozen || 0}`);
      
      // T√≠nh to√°n balance m·ªõi
      const currentAvailable = user.balance?.available || 0;
      const currentFrozen = user.balance?.frozen || 0;
      
      // N·∫øu frozen √¢m, chuy·ªÉn th√†nh available
      const newAvailable = currentAvailable + Math.abs(currentFrozen);
      const newFrozen = 0;
      
      console.log(`   - Balance sau: available=${newAvailable}, frozen=${newFrozen}`);
      
      // C·∫≠p nh·∫≠t balance
      const updateResult = await db.collection('users').updateOne(
        { _id: user._id },
        {
          $set: {
            'balance.available': newAvailable,
            'balance.frozen': newFrozen,
            updatedAt: new Date()
          }
        }
      );
      
      if (updateResult.modifiedCount > 0) {
        console.log(`   ‚úÖ ƒê√£ s·ª≠a balance th√†nh c√¥ng`);
      } else {
        console.log(`   ‚ùå Kh√¥ng th·ªÉ s·ª≠a balance`);
      }
    }

    // Ki·ªÉm tra l·∫°i
    const remainingNegativeFrozen = await db.collection('users').find({
      'balance.frozen': { $lt: 0 }
    }).count();

    console.log(`üìä C√≤n l·∫°i ${remainingNegativeFrozen} users c√≥ balance.frozen √¢m`);

    if (remainingNegativeFrozen === 0) {
      console.log('üéâ ƒê√£ s·ª≠a t·∫•t c·∫£ balance √¢m th√†nh c√¥ng!');
    } else {
      console.log('‚ö†Ô∏è V·∫´n c√≤n m·ªôt s·ªë users c√≥ balance.frozen √¢m');
    }

  } catch (error) {
    console.error('‚ùå L·ªói s·ª≠a balance:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixNegativeBalance()
    .then(() => {
      console.log('‚úÖ Script s·ª≠a balance ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script s·ª≠a balance th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { fixNegativeBalance };
