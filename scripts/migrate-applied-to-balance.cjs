const mongoose = require('mongoose');

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/financial_platform';

async function migrateAppliedToBalance() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    // T√¨m t·∫•t c·∫£ trades ch∆∞a c√≥ field appliedToBalance
    const tradesWithoutField = await db.collection('trades').find({
      appliedToBalance: { $exists: false }
    }).toArray();

    console.log(`üìä T√¨m th·∫•y ${tradesWithoutField.length} trades ch∆∞a c√≥ field appliedToBalance`);

    if (tradesWithoutField.length === 0) {
      console.log('‚úÖ T·∫•t c·∫£ trades ƒë√£ c√≥ field appliedToBalance');
      return;
    }

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ trades c≈©
    const updateResult = await db.collection('trades').updateMany(
      { appliedToBalance: { $exists: false } },
      { 
        $set: { 
          appliedToBalance: false,
          updatedAt: new Date()
        } 
      }
    );

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updateResult.modifiedCount} trades v·ªõi field appliedToBalance`);

    // T·∫°o index cho field m·ªõi
    console.log('üîÑ ƒêang t·∫°o index cho field appliedToBalance...');
    await db.collection('trades').createIndex({ 
      sessionId: 1, 
      appliedToBalance: 1, 
      status: 1 
    });
    console.log('‚úÖ ƒê√£ t·∫°o index th√†nh c√¥ng');

    // Ki·ªÉm tra l·∫°i
    const remainingTrades = await db.collection('trades').find({
      appliedToBalance: { $exists: false }
    }).count();

    console.log(`üìä C√≤n l·∫°i ${remainingTrades} trades ch∆∞a c√≥ field appliedToBalance`);

    if (remainingTrades === 0) {
      console.log('üéâ Migration ho√†n th√†nh th√†nh c√¥ng!');
    } else {
      console.log('‚ö†Ô∏è C√≥ m·ªôt s·ªë trades ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
    }

  } catch (error) {
    console.error('‚ùå L·ªói migration:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y migration
if (require.main === module) {
  migrateAppliedToBalance()
    .then(() => {
      console.log('‚úÖ Migration script ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Migration script th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { migrateAppliedToBalance };
