const mongoose = require('mongoose');

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/financial_platform';

async function monitorLogs() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    console.log('\nüìä === MONITORING TRADING SYSTEM ===');
    console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng...\n');

    // 1. Ki·ªÉm tra sessions ƒëang active
    const activeSessions = await db.collection('trading_sessions').find({
      status: 'ACTIVE',
      endTime: { $gt: new Date() }
    }).toArray();

    console.log(`üìÖ Sessions ƒëang active: ${activeSessions.length}`);
    for (const session of activeSessions) {
      console.log(`   - ${session.sessionId}: ${session.endTime}`);
    }

    // 2. Ki·ªÉm tra trades pending
    const pendingTrades = await db.collection('trades').find({
      status: 'pending'
    }).toArray();

    console.log(`\n‚è≥ Trades pending: ${pendingTrades.length}`);
    
    // Group by session
    const tradesBySession = {};
    for (const trade of pendingTrades) {
      if (!tradesBySession[trade.sessionId]) {
        tradesBySession[trade.sessionId] = [];
      }
      tradesBySession[trade.sessionId].push(trade);
    }

    for (const [sessionId, trades] of Object.entries(tradesBySession)) {
      console.log(`   - Session ${sessionId}: ${trades.length} trades`);
      
      // Group by user
      const tradesByUser = {};
      for (const trade of trades) {
        const userId = trade.userId.toString();
        if (!tradesByUser[userId]) {
          tradesByUser[userId] = [];
        }
        tradesByUser[userId].push(trade);
      }
      
      for (const [userId, userTrades] of Object.entries(tradesByUser)) {
        const totalAmount = userTrades.reduce((sum, t) => sum + t.amount, 0);
        console.log(`     User ${userId}: ${userTrades.length} trades, ${totalAmount.toLocaleString()} VND`);
      }
    }

    // 3. Ki·ªÉm tra balance issues
    const usersWithNegativeFrozen = await db.collection('users').find({
      'balance.frozen': { $lt: 0 }
    }).toArray();

    console.log(`\nüö® Users c√≥ frozen √¢m: ${usersWithNegativeFrozen.length}`);
    for (const user of usersWithNegativeFrozen.slice(0, 5)) {
      console.log(`   - User ${user._id}: available=${user.balance?.available}, frozen=${user.balance?.frozen}`);
    }

    // 4. Ki·ªÉm tra balance errors
    const balanceErrorTrades = await db.collection('trades').find({
      balanceError: true
    }).toArray();

    console.log(`\n‚ùå Trades c√≥ l·ªói balance: ${balanceErrorTrades.length}`);
    for (const trade of balanceErrorTrades.slice(0, 5)) {
      console.log(`   - Trade ${trade._id}: ${trade.balanceErrorReason} - ${trade.amount} VND`);
    }

    // 5. Ki·ªÉm tra session locks
    const activeLocks = await db.collection('session_locks').find({
      lockedUntil: { $gt: new Date() }
    }).toArray();

    console.log(`\nüîí Session locks ƒëang active: ${activeLocks.length}`);
    for (const lock of activeLocks) {
      console.log(`   - ${lock._id}: ${lock.sessionId} - ${lock.processId}`);
    }

    // 6. Ki·ªÉm tra completed trades h√¥m nay
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const completedTradesToday = await db.collection('trades').find({
      status: 'completed',
      completedAt: { $gte: today }
    }).toArray();

    console.log(`\n‚úÖ Trades completed h√¥m nay: ${completedTradesToday.length}`);
    
    const winTrades = completedTradesToday.filter(t => t.result === 'win');
    const loseTrades = completedTradesToday.filter(t => t.result === 'lose');
    
    console.log(`   - Th·∫Øng: ${winTrades.length}`);
    console.log(`   - Thua: ${loseTrades.length}`);
    
    const totalProfit = winTrades.reduce((sum, t) => sum + (t.profit || 0), 0);
    console.log(`   - T·ªïng profit: ${totalProfit.toLocaleString()} VND`);

    // 7. Ki·ªÉm tra performance
    console.log('\nüìà === PERFORMANCE METRICS ===');
    
    // Average processing time
    const recentCompletedTrades = await db.collection('trades').find({
      status: 'completed',
      completedAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) } // 24h
    }).toArray();

    if (recentCompletedTrades.length > 0) {
      const avgProcessingTime = recentCompletedTrades.reduce((sum, trade) => {
        const processingTime = trade.completedAt - trade.createdAt;
        return sum + processingTime;
      }, 0) / recentCompletedTrades.length;

      console.log(`‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω trung b√¨nh: ${Math.round(avgProcessingTime / 1000)}s`);
    }

    // 8. Recommendations
    console.log('\nüí° === RECOMMENDATIONS ===');
    
    if (usersWithNegativeFrozen.length > 0) {
      console.log('‚ö†Ô∏è C·∫ßn ch·∫°y script fix-negative-balance');
    }
    
    if (balanceErrorTrades.length > 0) {
      console.log('‚ö†Ô∏è C·∫ßn ki·ªÉm tra logic balance update');
    }
    
    if (activeLocks.length > 10) {
      console.log('‚ö†Ô∏è C√≥ nhi·ªÅu locks active, c·∫ßn ki·ªÉm tra cleanup');
    }

    console.log('\n‚úÖ Monitoring ho√†n th√†nh');

  } catch (error) {
    console.error('‚ùå L·ªói monitoring:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  monitorLogs()
    .then(() => {
      console.log('‚úÖ Script monitor logs ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script monitor logs th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { monitorLogs };
