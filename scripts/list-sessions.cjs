const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');

// Load .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value && !process.env[key]) {
      process.env[key] = value.trim();
    }
  });
}

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/finacial_platfom';

async function listSessions() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    console.log('\nüìÖ === LIST ALL SESSIONS ===\n');

    // L·∫•y t·∫•t c·∫£ sessions
    const sessions = await db.collection('trading_sessions').find({}).sort({ createdAt: -1 }).limit(20).toArray();
    
    console.log(`üìä T·ªïng sessions: ${sessions.length}`);
    
    for (const session of sessions) {
      console.log(`\nüìã Session: ${session.sessionId}`);
      console.log(`   Status: ${session.status}`);
      console.log(`   Result: ${session.result || 'N/A'}`);
      console.log(`   ProcessingComplete: ${session.processingComplete || false}`);
      console.log(`   EndTime: ${session.endTime}`);
      console.log(`   CreatedAt: ${session.createdAt}`);
      
      // ƒê·∫øm trades trong session
      const tradesCount = await db.collection('trades').countDocuments({ sessionId: session.sessionId });
      console.log(`   Trades: ${tradesCount}`);
      
      if (tradesCount > 0) {
        const tradesByStatus = await db.collection('trades').aggregate([
          { $match: { sessionId: session.sessionId } },
          { $group: { _id: '$status', count: { $sum: 1 } } }
        ]).toArray();
        
        for (const status of tradesByStatus) {
          console.log(`     - ${status._id}: ${status.count}`);
        }
      }
    }

    // Ki·ªÉm tra sessions g·∫ßn ƒë√¢y
    console.log('\nüîç === RECENT SESSIONS (last 10) ===');
    const recentSessions = await db.collection('trading_sessions').find({}).sort({ createdAt: -1 }).limit(10).toArray();
    
    for (const session of recentSessions) {
      console.log(`   ${session.sessionId} - ${session.status} - ${session.result || 'N/A'} - ${session.createdAt}`);
    }

    console.log('\n‚úÖ List sessions ho√†n th√†nh');

  } catch (error) {
    console.error('‚ùå L·ªói list sessions:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  listSessions()
    .then(() => {
      console.log('‚úÖ Script list sessions ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script list sessions th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { listSessions };
