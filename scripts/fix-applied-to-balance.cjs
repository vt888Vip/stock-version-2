const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');

// Load .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value && !process.env[key]) {
      process.env[key] = value.trim();
    }
  });
}

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/finacial_platfom';

async function fixAppliedToBalance() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    console.log('\nüîß === FIX APPLIED TO BALANCE ===\n');

    // T√¨m trades ƒë√£ completed nh∆∞ng ch∆∞a c√≥ appliedToBalance: true
    const tradesToFix = await db.collection('trades').find({
      status: { $in: ['completed', 'error'] },
      appliedToBalance: { $ne: true }
    }).toArray();

    console.log(`üìä T√¨m th·∫•y ${tradesToFix.length} trades c·∫ßn fix`);

    if (tradesToFix.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ trades n√†o c·∫ßn fix');
      return;
    }

    let fixedCount = 0;
    let errorCount = 0;

    for (const trade of tradesToFix) {
      try {
        console.log(`üîß Fixing trade ${trade._id}: ${trade.sessionId} - ${trade.status} - ${trade.result}`);
        
        // Update appliedToBalance: true
        const result = await db.collection('trades').updateOne(
          { _id: trade._id },
          {
            $set: {
              appliedToBalance: true,
              updatedAt: new Date()
            }
          }
        );

        if (result.modifiedCount > 0) {
          fixedCount++;
          console.log(`‚úÖ Fixed trade ${trade._id}`);
        } else {
          console.log(`‚ö†Ô∏è Trade ${trade._id} kh√¥ng ƒë∆∞·ª£c update`);
        }
      } catch (error) {
        errorCount++;
        console.error(`‚ùå Error fixing trade ${trade._id}:`, error.message);
      }
    }

    console.log(`\nüìä === K·∫æT QU·∫¢ ===`);
    console.log(`‚úÖ Fixed: ${fixedCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìà Total: ${tradesToFix.length}`);

    // Ki·ªÉm tra sessions c·∫ßn update processingComplete
    console.log('\nüîç === CHECK SESSIONS ===');
    
    const sessionsWithCompletedTrades = await db.collection('trades').aggregate([
      {
        $match: {
          status: { $in: ['completed', 'error'] },
          appliedToBalance: true
        }
      },
      {
        $group: {
          _id: '$sessionId',
          totalTrades: { $sum: 1 },
          completedTrades: {
            $sum: {
              $cond: [{ $eq: ['$status', 'completed'] }, 1, 0]
            }
          },
          errorTrades: {
            $sum: {
              $cond: [{ $eq: ['$status', 'error'] }, 1, 0]
            }
          }
        }
      }
    ]).toArray();

    console.log(`üìä Sessions c√≥ trades completed: ${sessionsWithCompletedTrades.length}`);

    for (const session of sessionsWithCompletedTrades) {
      const sessionInfo = await db.collection('trading_sessions').findOne({ sessionId: session._id });
      
      if (sessionInfo && !sessionInfo.processingComplete) {
        console.log(`üîß Session ${session._id} ch∆∞a c√≥ processingComplete, ƒëang update...`);
        
        await db.collection('trading_sessions').updateOne(
          { sessionId: session._id },
          {
            $set: {
              processingComplete: true,
              processingCompletedAt: new Date(),
              updatedAt: new Date()
            }
          }
        );
        
        console.log(`‚úÖ Updated session ${session._id}`);
      }
    }

    console.log('\n‚úÖ Fix applied to balance ho√†n th√†nh');

  } catch (error) {
    console.error('‚ùå L·ªói fix applied to balance:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixAppliedToBalance()
    .then(() => {
      console.log('‚úÖ Script fix applied to balance ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script fix applied to balance th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { fixAppliedToBalance };
