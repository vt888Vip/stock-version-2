const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');

// Load .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value && !process.env[key]) {
      process.env[key] = value.trim();
    }
  });
}

async function fixProcessingComplete() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    console.log('\nüîß === FIX PROCESSINGCOMPLETE ===\n');
    
    // T√¨m sessions COMPLETED nh∆∞ng kh√¥ng c√≥ processingComplete
    const sessionsToFix = await db.collection('trading_sessions').find({
      status: 'COMPLETED',
      processingComplete: { $exists: false }
    }).toArray();
    
    console.log(`üìä T√¨m th·∫•y ${sessionsToFix.length} sessions c·∫ßn fix`);
    
    if (sessionsToFix.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ sessions n√†o c·∫ßn fix');
      return;
    }
    
    let fixedCount = 0;
    let errorCount = 0;
    
    for (const session of sessionsToFix) {
      try {
        console.log(`üîß Fixing session ${session.sessionId}: ${session.status} - ${session.result}`);
        
        // Update processingComplete: true
        const result = await db.collection('trading_sessions').updateOne(
          { _id: session._id },
          {
            $set: {
              processingComplete: true,
              processingCompletedAt: session.updatedAt || session.createdAt,
              updatedAt: new Date()
            }
          }
        );
        
        if (result.modifiedCount > 0) {
          fixedCount++;
          console.log(`‚úÖ Fixed session ${session.sessionId}`);
        } else {
          console.log(`‚ö†Ô∏è Session ${session.sessionId} kh√¥ng ƒë∆∞·ª£c update`);
        }
      } catch (error) {
        errorCount++;
        console.error(`‚ùå Error fixing session ${session.sessionId}:`, error.message);
      }
    }
    
    console.log(`\nüìä === K·∫æT QU·∫¢ ===`);
    console.log(`‚úÖ Fixed: ${fixedCount}`);
    console.log(`‚ùå Errors: ${errorCount}`);
    console.log(`üìà Total: ${sessionsToFix.length}`);
    
    // Ki·ªÉm tra l·∫°i
    console.log('\nüîç === KI·ªÇM TRA SAU KHI FIX ===');
    
    const remainingSessionsToFix = await db.collection('trading_sessions').find({
      status: 'COMPLETED',
      processingComplete: { $exists: false }
    }).toArray();
    
    console.log(`üìä Sessions COMPLETED c√≤n l·∫°i ch∆∞a c√≥ processingComplete: ${remainingSessionsToFix.length}`);
    
    const totalSessionsWithProcessingComplete = await db.collection('trading_sessions').find({
      processingComplete: { $exists: true }
    }).toArray();
    
    console.log(`üìä T·ªïng sessions c√≥ processingComplete: ${totalSessionsWithProcessingComplete.length}`);
    
    console.log('\n‚úÖ Fix processing complete ho√†n th√†nh');

  } catch (error) {
    console.error('‚ùå L·ªói fix processing complete:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  fixProcessingComplete()
    .then(() => {
      console.log('‚úÖ Script ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { fixProcessingComplete };
