const mongoose = require('mongoose');

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/financial_platform';

async function testCheckResults() {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    // T√¨m session c√≥ trades pending
    const sessionsWithPendingTrades = await db.collection('trades').aggregate([
      {
        $match: {
          status: 'pending'
        }
      },
      {
        $group: {
          _id: '$sessionId',
          count: { $sum: 1 }
        }
      },
      {
        $sort: { count: -1 }
      }
    ]).toArray();

    console.log(`üìä T√¨m th·∫•y ${sessionsWithPendingTrades.length} sessions c√≥ trades pending`);

    if (sessionsWithPendingTrades.length === 0) {
      console.log('‚úÖ Kh√¥ng c√≥ trades pending n√†o ƒë·ªÉ test');
      return;
    }

    // L·∫•y session ƒë·∫ßu ti√™n ƒë·ªÉ test
    const testSessionId = sessionsWithPendingTrades[0]._id;
    const pendingCount = sessionsWithPendingTrades[0].count;
    
    console.log(`üéØ Test session: ${testSessionId} v·ªõi ${pendingCount} trades pending`);

    // Ki·ªÉm tra session status
    const sessionInfo = await db.collection('trading_sessions').findOne({ sessionId: testSessionId });
    console.log(`üìã Session info:`, {
      sessionId: sessionInfo?.sessionId,
      status: sessionInfo?.status,
      result: sessionInfo?.result,
      endTime: sessionInfo?.endTime,
      processingComplete: sessionInfo?.processingComplete
    });

    // Test API check-results
    console.log('\nüöÄ B·∫Øt ƒë·∫ßu test API check-results...');
    
    const startTime = Date.now();
    
    // G·ªçi API check-results
    const response = await fetch('http://localhost:3000/api/trades/check-results', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer test-token'
      },
      body: JSON.stringify({
        sessionId: testSessionId
      })
    });

    const result = await response.json();
    const endTime = Date.now();
    
    console.log(`‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω: ${endTime - startTime}ms`);
    console.log(`üìä K·∫øt qu·∫£:`, result);

    // Ki·ªÉm tra trades sau khi x·ª≠ l√Ω
    const remainingPendingTrades = await db.collection('trades').countDocuments({
      sessionId: testSessionId,
      status: 'pending'
    });

    const completedTrades = await db.collection('trades').countDocuments({
      sessionId: testSessionId,
      status: 'completed'
    });

    const errorTrades = await db.collection('trades').countDocuments({
      sessionId: testSessionId,
      status: 'error'
    });

    console.log(`üìä Sau khi x·ª≠ l√Ω:`);
    console.log(`   - Trades pending c√≤n l·∫°i: ${remainingPendingTrades}`);
    console.log(`   - Trades completed: ${completedTrades}`);
    console.log(`   - Trades error: ${errorTrades}`);

    // Ki·ªÉm tra balance errors
    const balanceErrorTrades = await db.collection('trades').find({
      sessionId: testSessionId,
      balanceError: true
    }).toArray();

    if (balanceErrorTrades.length > 0) {
      console.log(`üö® T√¨m th·∫•y ${balanceErrorTrades.length} trades c√≥ l·ªói balance:`);
      for (const trade of balanceErrorTrades.slice(0, 3)) {
        console.log(`   - Trade ${trade._id}: ${trade.balanceErrorReason}`);
      }
    }

    // Ki·ªÉm tra session completion
    const updatedSession = await db.collection('trading_sessions').findOne({ sessionId: testSessionId });
    console.log(`üìã Session sau khi x·ª≠ l√Ω:`, {
      processingComplete: updatedSession?.processingComplete,
      result: updatedSession?.result,
      status: updatedSession?.status
    });

  } catch (error) {
    console.error('‚ùå L·ªói test check-results:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  testCheckResults()
    .then(() => {
      console.log('‚úÖ Script test check-results ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script test check-results th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { testCheckResults };
