const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');

// Load .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value && !process.env[key]) {
      process.env[key] = value.trim();
    }
  });
}

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/finacial_platfom';

async function debugSession(sessionId) {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB th√†nh c√¥ng');

    const db = mongoose.connection.db;
    
    console.log(`\nüîç === DEBUG SESSION: ${sessionId} ===\n`);

    // 1. Ki·ªÉm tra session
    console.log('üìã Ki·ªÉm tra trading session...');
    const session = await db.collection('trading_sessions').findOne({ sessionId });
    
    if (!session) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y session!');
      return;
    }

    console.log('‚úÖ Session found:', {
      sessionId: session.sessionId,
      status: session.status,
      result: session.result,
      processingComplete: session.processingComplete,
      endTime: session.endTime,
      createdAt: session.createdAt,
      updatedAt: session.updatedAt
    });

    // 2. Ki·ªÉm tra trades trong session
    console.log('\nüìä Ki·ªÉm tra trades trong session...');
    const trades = await db.collection('trades').find({ sessionId }).toArray();
    
    console.log(`üìà T·ªïng trades: ${trades.length}`);
    
    const tradesByStatus = {};
    for (const trade of trades) {
      const status = trade.status || 'unknown';
      if (!tradesByStatus[status]) {
        tradesByStatus[status] = [];
      }
      tradesByStatus[status].push(trade);
    }

    for (const [status, statusTrades] of Object.entries(tradesByStatus)) {
      console.log(`   - ${status}: ${statusTrades.length} trades`);
      
      if (status === 'pending') {
        for (const trade of statusTrades.slice(0, 3)) {
          console.log(`     Trade ${trade._id}: ${trade.direction} ${trade.amount} VND - appliedToBalance: ${trade.appliedToBalance}`);
        }
      }
    }

    // 3. Ki·ªÉm tra session locks
    console.log('\nüîí Ki·ªÉm tra session locks...');
    const locks = await db.collection('session_locks').find({
      _id: `session_lock_${sessionId}`
    }).toArray();

    console.log(`üîí Active locks: ${locks.length}`);
    for (const lock of locks) {
      console.log(`   - ${lock._id}: ${lock.sessionId} - ${lock.processId} - ${lock.lockedUntil}`);
    }

    // 4. Ki·ªÉm tra balance c·ªßa users c√≥ trades trong session
    console.log('\nüí∞ Ki·ªÉm tra balance c·ªßa users...');
    const userIds = [...new Set(trades.map(t => t.userId.toString()))];
    
    for (const userId of userIds.slice(0, 5)) {
      const user = await db.collection('users').findOne({ _id: new mongoose.Types.ObjectId(userId) });
      if (user) {
        console.log(`   User ${userId}: available=${user.balance?.available}, frozen=${user.balance?.frozen}`);
      }
    }

    // 5. Ki·ªÉm tra projection query
    console.log('\nüîç Test projection query...');
    const projectionTest = await db.collection('trading_sessions').findOne(
      { sessionId },
      { projection: { sessionId: 1, status: 1, result: 1, processingComplete: 1, endTime: 1 } }
    );
    
    console.log('üìã Projection result:', projectionTest);

    // 6. Ki·ªÉm tra pending trades v·ªõi appliedToBalance = false
    console.log('\n‚è≥ Ki·ªÉm tra pending trades ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω...');
    const pendingTrades = await db.collection('trades').find({
      sessionId,
      status: 'pending',
      appliedToBalance: false
    }).toArray();

    console.log(`üìä Pending trades ch∆∞a x·ª≠ l√Ω: ${pendingTrades.length}`);
    for (const trade of pendingTrades.slice(0, 3)) {
      console.log(`   - ${trade._id}: ${trade.direction} ${trade.amount} VND`);
    }

    // 7. Ki·ªÉm tra processing trades
    console.log('\n‚öôÔ∏è Ki·ªÉm tra trades ƒëang processing...');
    const processingTrades = await db.collection('trades').find({
      sessionId,
      processing: true
    }).toArray();

    console.log(`‚öôÔ∏è Processing trades: ${processingTrades.length}`);
    for (const trade of processingTrades) {
      console.log(`   - ${trade._id}: ${trade.processingId} - ${trade.processingStartedAt}`);
    }

    // 8. Recommendations
    console.log('\nüí° === RECOMMENDATIONS ===');
    
    if (pendingTrades.length > 0) {
      console.log('‚ö†Ô∏è C√≥ pending trades ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω');
    }
    
    if (processingTrades.length > 0) {
      console.log('‚ö†Ô∏è C√≥ trades ƒëang processing, c√≥ th·ªÉ b·ªã stuck');
    }
    
    if (locks.length > 0) {
      console.log('‚ö†Ô∏è C√≥ active locks, c·∫ßn ki·ªÉm tra timeout');
    }
    
    if (!session.processingComplete && trades.length > 0) {
      console.log('‚ö†Ô∏è Session ch∆∞a ho√†n th√†nh nh∆∞ng c√≥ trades');
    }

    console.log('\n‚úÖ Debug ho√†n th√†nh');

  } catch (error) {
    console.error('‚ùå L·ªói debug session:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
if (require.main === module) {
  const sessionId = process.argv[2];
  
  if (!sessionId) {
    console.log('‚ùå Vui l√≤ng cung c·∫•p sessionId: node scripts/debug-session.cjs <sessionId>');
    process.exit(1);
  }

  debugSession(sessionId)
    .then(() => {
      console.log('‚úÖ Script debug session ho√†n th√†nh');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script debug session th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

module.exports = { debugSession };
