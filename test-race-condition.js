// Test script ƒë·ªÉ ki·ªÉm tra race condition
const BASE_URL = 'http://localhost:3000';

// Gi·∫£ l·∫≠p token (c·∫ßn thay b·∫±ng token th·∫≠t)
const TOKEN = 'your_token_here';

async function testRaceCondition() {
  console.log('üß™ Test Race Condition...\n');

  try {
    // Test 1: ƒê·∫∑t l·ªánh v√† ƒë·ªìng th·ªùi g·ªçi balance API
    console.log('1Ô∏è‚É£ Test ƒë·∫∑t l·ªánh + balance API ƒë·ªìng th·ªùi...');
    
    const amount = 100000; // 100k VND
    const sessionId = '202501271200'; // Session ID m·∫´u
    
    // T·∫°o 5 request ƒë·ªìng th·ªùi
    const promises = [];
    
    // Request 1: ƒê·∫∑t l·ªánh
    promises.push(
      fetch(`${BASE_URL}/api/trades/place`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${TOKEN}`
        },
        body: JSON.stringify({
          sessionId,
          direction: 'UP',
          amount
        })
      }).then(res => res.json()).then(data => ({ type: 'place_trade', data }))
    );
    
    // Request 2-5: G·ªçi balance API (gi·∫£ l·∫≠p polling)
    for (let i = 0; i < 4; i++) {
      promises.push(
        fetch(`${BASE_URL}/api/user/balance`, {
          headers: {
            'Authorization': `Bearer ${TOKEN}`
          }
        }).then(res => res.json()).then(data => ({ type: `balance_${i+1}`, data }))
      );
    }
    
    // Ch·∫°y t·∫•t c·∫£ request ƒë·ªìng th·ªùi
    const results = await Promise.all(promises);
    
    console.log('üìä K·∫øt qu·∫£:');
    results.forEach(result => {
      console.log(`   ${result.type}:`, result.data.success ? '‚úÖ Th√†nh c√¥ng' : '‚ùå Th·∫•t b·∫°i');
      if (result.type === 'place_trade' && result.data.success) {
        console.log(`   - Balance tr∆∞·ªõc: ${result.data.balanceBefore}`);
        console.log(`   - Balance sau: ${result.data.balanceAfter}`);
      }
    });
    
    // Test 2: Ki·ªÉm tra balance consistency
    console.log('\n2Ô∏è‚É£ Test balance consistency...');
    const balanceResponse = await fetch(`${BASE_URL}/api/user/balance`, {
      headers: {
        'Authorization': `Bearer ${TOKEN}`
      }
    });
    
    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log('   Balance hi·ªán t·∫°i:', balanceData.balance);
    }
    
    console.log('\nüéâ Test ho√†n th√†nh!');
    console.log('üìù L∆∞u √Ω:');
    console.log('   - N·∫øu balance kh√¥ng nh·∫•t qu√°n, c√≥ race condition');
    console.log('   - N·∫øu t·∫•t c·∫£ request th√†nh c√¥ng, atomic operations ho·∫°t ƒë·ªông t·ªët');
    
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error);
  }
}

// Ch·∫°y test
testRaceCondition();
